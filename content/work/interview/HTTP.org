# -*- coding:utf-8-*-
#+TITLE: HTTP
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com

* 描述一下浏览器输入网址之后发生了什么。

* HTTP/1.0 HTTP/1.1 HTTP/2.0 HTTP/3.0 之间的区别
  https://coolshell.cn/articles/19840.html

** HTTP/1.1
   HTTP/1.1 主要解决了 HTTP 1.0 的网络性能的问题，以及增加了一些新的东西：
   + 可以设置 keepalive 来让 HTTP 重用 TCP 链接，重用 TCP 链接可以省了每次请求都要在广域网上进行的 TCP 的三次握手的巨大开销。这是所谓的“HTTP 长链接” 或是 “请求响应式的 HTTP 持久链接”。英文叫 HTTP Persistent connection.
   + 支持 pipeline 网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。（注：非幂等的 POST 方法或是有依赖的请求是不能被 pipeline 化的）
   + 支持 Chunked Responses ，也就是说，在 Response 的时候，不必说明 Content-Length 这样，客户端就不能断连接，直到收到服务端的 EOF 标识。这种技术又叫 “服务端 Push 模型”，或是 “服务端 Push 式的 HTTP 持久链接”
   + 还增加了 cache control 机制。
   + 协议头注增加了 Language, Encoding, Type 等等头，让客户端可以跟服务器端进行更多的协商。
   + 还正式加入了一个很重要的头—— HOST 这样的话，服务器就知道你要请求哪个网站了。因为可以有多个域名解析到同一个 IP 上，要区分用户是请求的哪个域名，就需要在 HTTP 的协议中加入域名的信息，而不是被 DNS 转换过的 IP 信息。
   + 正式加入了 OPTIONS 方法，其主要用于 CORS – Cross Origin Resource Sharing 应用。

** HTTP/2
   和 HTTP/1.1 最主要的不同是：
   + HTTP/2 是一个二进制协议，增加了数据传输的效率。
   + HTTP/2 是可以在一个 TCP 链接中并发请求多个 HTTP 请求，移除了 HTTP/1.1 中的串行请求。
   + HTTP/2 会压缩头，如果你同时发出多个请求，他们的头是一样的或是相似的，那么，协议会帮你消除重复的部分。这就是所谓的 HPACK 算法（参看 RFC 7541 附录 A）
   + HTTP/2 允许服务端在客户端放 cache，又叫服务端 push，也就是说，你没有请求的东西，我服务端可以先送给你放在你的本地缓存中。比如，你请求 X，我服务端知道 X 依赖于 Y，虽然你没有的请求 Y，但我把把 Y 跟着 X 的请求一起返回客户端。

** HTTP/3
   然而，这个世界没有完美的解决方案，HTTP/2 也不例外，其主要的问题是：若干个 HTTP 的请求在复用一个 TCP 的连接，底层的 TCP 协议是不知道上层有多少个 HTTP 的请求的，所以，一旦发生丢包，造成的问题就是所有的 HTTP 请求都必需等待这个丢了的包被重传回来，哪怕丢的那个包不是我这个 HTTP 请求的。因为 TCP 底层是没有这个知识了。

   这个问题又叫 Head-of-Line Blocking 问题，这也是一个比较经典的流量调度的问题。

   是的 TCP 是无解了，但是 UDP 是有解的 ！于是 HTTP/3 破天荒地把 HT1TP 底层的 TCP 协议改成了 UDP！

** HTTP/1.1 的 pipeline 和 HTTP/2 的多路复用的区别
   + 没有流水线操作的 HTTP/1.1：在下一个请求发出之前,必须响应 TCP 连接上的每个 HTTP 请求.
   + 带有流水线的 HTTP/1.1:可以立即进行 TCP 连接上的每个 HTTP 请求,而无需等待先前请求的响应返回.回复将以相同的顺序返回.
   + HTTP/2 多路复用:可以立即进行 TCP 连接上的每个 HTTP 请求,而无需等待先前的响应返回.回复可以按任何顺序返回.

* HTTPS

  Http + 加密 + 认证 + 完整性保护 = Https。

  传统的 Http 协议是一种应用层的传输协议，Http 直接与 TCP 协议通信。

  对称秘钥加密是指加密与解密过程使用同一把秘钥。这种方式的优点是处理速度快，但是如何安全的从一方将秘钥传递到通信的另一方是一个问题。

  非对称秘钥加密是指加密与解密使用两把不同的秘钥。这两把秘钥，一把叫公开秘钥，可以随意对外公开。一把叫私有秘钥，只用于本身持有。得到公开秘钥的客户端可以使用公开秘钥对传输内容进行加密，而只有私有秘钥持有者本身可以对公开秘钥加密的内容进行解密。这种方式克服了秘钥交换的问题，但是相对于对称秘钥加密的方式，处理速度较慢。

  SSL\TLS 的加密方式则是结合了两种加密方式的优点。首先采用非对称秘钥加密，将一个对称秘钥使用公开秘钥加密后传输到对方。对方使用私有秘钥解密，得到传输的对称秘钥。之后双方再使用对称秘钥进行通信。这样即解决了对称秘钥加密的秘钥传输问题，又利用了对称秘钥的高效率来进行通信内容的加密与解密。

  Https 的通信流程：
  1. Client 发起请求；
  2. Server 端响应请求，并在之后将证书发送至 Client；
  3. Client 使用认证机构的共钥认证证书，并从证书中取出 Server 端共钥；
  4. Client 使用共钥加密一个随机秘钥，并传到 Server；
  5. Server 使用私钥解密出随机秘钥；
  6. 通信双方使用随机秘钥最为对称秘钥进行加密解密。


* cookie 和 session 有什么区别？
  + Session 是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；
  + Cookie 是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现 Session 的一种方式。

* GET 和 POST 区别？
