# -*- coding:utf-8-*-
#+TITLE: 算法训练营
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com

* 概述

** 课程安排

** 班级小组

** 作业总结
   + 每周至少两道题目，一篇学习总结

* 第一课 数据结构与算法总览
  职业训练方法：
  1. 知识分解
  2. 刻意练习
  3. 及时反馈

  切题四件套：
  + 理解题目
    + 暴力破解
    + 最近重复子问题。
  + 可能解法
    + 对比（时间、空间复杂度）
    + 延伸
  + 编写代码
  + 测试用例


  刷题方法：
  + 第一遍
    + 5 分钟：读题+思考
    + 直接看解法：多解法，比较解法优劣
    + 背诵默写好的解法
  + 第二遍
    + 马上自己写->leetCode 提交
    + 多种解法比较、体会、优化
  + 第三遍
    + 过一天重复做题
    + 不同解法的熟练度->专项练习
  + 第四遍
    + 过一周反复练习相同的题目
  + 第五编
    + 面试前回顾题目

  数据结构分解：
  + 一维
    + 基础：数组（array），链表（linked list）
    + 高级：栈（stack），队列（queue），双端队列（deque），集合（set），映射（hash or map），
  + 二维
    + 基础：树（tree），图（graph）
    + 高级：二叉搜索树（binary search tree），及其衍生（红黑树，AVL），堆（heap），并查集（disjoint set），字典树（Trie）
  + 特殊
    + 位运算（Bitwise），布隆过滤器（BloomFilter）
    + LRU Cache


  算法分解：
  + 递归（Recursion）
  + 搜索（Search）
  + 动态规划（Dynamic Programming）
  + 二分查找（Binary Search）
  + 贪心（Greedy）
  + 数学，几何


* 第二课 训练准备和复杂度分析
  自顶向下的编程方式

  主定理，递归算法的时间复杂度。

* 第三课 数组、链表、跳表

  跳表：
  + 只能用于有序列表。
  + 优化思路：1. 升维增加索引信息。 2.空间换时间

  LRU 缓存的实现。

  redis 为什么使用跳表 而不是红黑树（知乎）？


** [[https://leetcode-cn.com/problems/move-zeroes/][283 移动零]]
  + 考察点：同向双指针
  + 数组元素比较，原地，O(n)，可能需要两个指针（索引）
    + 一个指针保存特定条件的位置，用作替换。
    + 另外一个指针用于遍历数据组。
    + 如果需要保持数组稳定，两个指针都 *同向* 前进。
    + 如果不需要保持数组稳定，两个数组 *相向* 前进。


** [[https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/][26 删除数组中的重复项]]
   + 考察点：同向双指针

** [[https://leetcode-cn.com/problems/rotate-array/][189 旋转数组]]
   + 考察点：数组长度取模？
   + 不是很好想，
   + 考虑 k>n 的情况。

** [[https://leetcode-cn.com/problems/plus-one/][66 加一]]
   有三种解法
   1. 递归
   2. 迭代
   3. 自己想了一种解法，具体是
      1. 找到最后一个不是 9 的位置，那么
      2. 该位置以后的数字直接置零
      3. 如果该位置存在，只需将该位置+1 即可
      4. 该位置如果不存在，那么说明整个数组都是 9，那么头部需要增加一位，该位必定是 1

      如果是将数组换成单链表，使用双指针，该思路同样可行。


** [[https://leetcode-cn.com/problems/merge-sorted-array/][88 合并两个有序数组]]
   + 考察点：倒序遍历数组
   + 要从后向前遍历
   + 核心思想：记住数组是可以倒序遍历的。


** [[https://leetcode-cn.com/problems/container-with-most-water/][11 盛水最多的容器]]
  + 考察点：相向双指针，降维
  + 本质上还是用到了两个指针，核心思想是两个指针相向前进的时候，他们间距不断变小，那么这样宽度这个变量就不需要考虑了，所以只需要比较左右边界高度就可以了。这样就将需要比较的条件从 2 个（高度宽度）变成了一个（高度）。
  + 这里也是用到了升维降维的思想。之前说过有时候升维可以增加索引（比如跳跃表），加快索引。那么这个例子就说明了，降维有利于减少影响问题的变量，简化问题。

** [[https://leetcode-cn.com/problems/climbing-stairs/][70 爬楼梯]]
  + 动态规划，查找最小重复单元。
  + 考察递归

** [[https://leetcode-cn.com/problems/two-sum][1 两数之和]]
   + 考察点：升维
   + 使用 hash 表辅助。
   + 要注意题解，变化可能如下：
     + 返回的是数组元素还是数组元素所在位置。
     + 如果返回数组元素，是不是唯一解

** [[https://leetcode-cn.com/problems/3sum][15 三数之和]]
   + 考察点：升维
   + 两数之和的变种。

** 数组总结
  + 数组题目如何解决：
    + 单指针一般需要增加额外的索引，来加速访问，比如两数之和，三数之和问题，这是用了“升维”的思想。
    + 双指针解决问题有以下情形：
      + 同向双指针
      + 相向双指针，数组有序，或者隐含有序条件，如 11-盛水最多的容器。
    + 数组性质：
      + 基于数组可以 O(1)遍历做延伸。比如旋转数组、加一。
      + 可以逆序遍历。比如合并两个有序数组。

** [[https://leetcode-cn.com/problems/reverse-linked-list][206 反转链表]]
   + 考察点：链表基本操作
   + pre 保存已经反转好的链表头部
   + tmp 临时变量保存 curr 的 next

** [[https://leetcode-cn.com/problems/merge-two-sorted-lists/][21 合并两个有序链表]]
   + 考察点：链表基本操作

** [[https://leetcode-cn.com/problems/swap-nodes-in-pairs][24 两个一组交换链接中的节点]]
   + 考察点：链表基本操作。
   + 要将链表头部保存下来，需要增加一个空节点（哨兵节点）
   + 要维护交换组和前面节点的联系
   + 如果需要更新前一个节点的引用，就需要一个哨兵节点。

** [[https://leetcode-cn.com/problems/reverse-nodes-in-k-group][25 k 个一组交换链表中的节点]]
   + 考察点：双指针，链表基本操作
   + 链表中看到 k 个一组，首先想到双指针操作。
   + 不要试图先对链表进行分组，一边遍历，一边找分组的边界，这样代码更简单。
   + count%k 是比较巧妙的地方。
   + reverse 链表的时候区间范围（start,end），因为 reverse 以后的 链表，要和 start，end 关联起来。

** [[https://leetcode-cn.com/problems/linked-list-cycle/][141 环形列表]]
   题目描述是什么鬼？看不懂。

** [[https://leetcode-cn.com/problems/linked-list-cycle-ii/][142 环形列表2]]
   题目描述是什么鬼？看不懂。

** 链表总结
   考察如下内容：
   + 链表指针的基本操作，一般需要 preHead 指针，该指针是 null 还是 node，取决于是否需要更改前面节点的 next。要明确 pre 指针代表的含义。
   + 单链表特性：只能单向访问。所以如果要 O(n)遍历，需要双指针。
   + 单链表只能单向访问，所以一般使用双指针、栈、递归来辅助遍历。

* 第四课 栈、队列、优先队列、双端队列

** [[https://leetcode-cn.com/problems/valid-parentheses/][20 有效括号]]
   + 考察点：栈的基本性质

** [[https://leetcode-cn.com/problems/min-stack/][155 最小栈]]
   + 考察点：单调栈？

** [[https://leetcode-cn.com/problems/sliding-window-maximum/][239 滑动窗口最大值]]
   + 考察点：最小栈的扩展，保存元素的栈变成双端队列。也可以使用单调栈来解决。

** [[https://leetcode-cn.com/problems/design-circular-deque/][641 设计循环双端队列]]
   + 考察点：

** [[https://leetcode-cn.com/problems/largest-rectangle-in-histogram/][84 柱状图形中最大的矩形]]
   + 考察点：单调栈性质：单调递减栈能找到栈顶元素左右第一个比它小的元素

** [[https://leetcode-cn.com/problems/trapping-rain-water/][42-接雨水]]
   + 考察点：单调栈

* 第五课 哈希表、映射、集合

** [[https://leetcode-cn.com/problems/valid-anagram][242 有效的字母异位词]]
   + 考察点：hash 使用
   + 异位词的共同点：所有异位词字母排序后得到的单词一样，所以可以作为 key。

** [[https://leetcode-cn.com/problems/group-anagrams/][49 字母异位词分组]]
   + 同上

* 第六课 树、二叉树、二叉搜索树

** [[https://leetcode-cn.com/problems/binary-tree-inorder-traversal/][94 二叉树的中序遍历]]
   + 考察点：递归
** [[https://leetcode-cn.com/problems/binary-tree-preorder-traversal/][144 二叉树的前序遍历]]
   + 考察点：递归

** [[https://leetcode-cn.com/problems/binary-tree-postorder-traversal/][145-二叉树的后续遍历]]
   + 考察点：递归
   + 堆栈

** [[https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/description/][589 N叉树的前序遍历]]
   + 考察点：递归

** [[https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/][590 N叉树的后序遍历]]
   + 考察点：递归

** 树总结
   + 树是链表的二维化，所以链表的一些操作技巧可以用在树上。

* 第七课 堆、二叉堆、图
  堆的实现：二叉堆，斐波那契堆，参看 https://en.wikipedia.org/wiki/Heap_(data_structure)

  二叉堆：
  + 完全二叉树。
  + 数组存储：左（2i+1） 右儿子（2i+2）

** [[https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/][40-最小的k个数]]
   + 考察点：堆的性质。
   + 最好自己实现以下大根堆的调整过程。

** [[https://leetcode-cn.com/problems/kth-largest-element-in-an-array/][215 数组中的第k个最大元素]]
   + 考察点：堆的性质。
   + 同上一题，就是使用大根堆排序后的最后一个元素。

** [[https://leetcode-cn.com/problems/top-k-frequent-elements/][347 前k个高频元素]]
   + 考察点：堆的性质，要举一反三
   + (k,c)按照 c 简历大根堆。

** [[https://leetcode-cn.com/problems/sliding-window-maximum/][239 滑动窗口的最大值]]
   + 考察思路：单调栈思路的变形
   + 如果要是使用堆，k个元素建堆的复杂度是 O(k),该操作要执行 n-k 此，总体时间复杂度是 O(k)*O(n-k)

** [[https://leetcode-cn.com/problems/ugly-number-ii/][264 丑数]]
   + 考察点：使用最小堆


* 第七课 泛型递归、树的递归（recursion）
  递归，从名称上可以看出，存在两个动作，递和归。其中递是在解决原问题时对子问题的拆解。归是指解决完子问题后回溯到原问题的过程。二者转化的边界就是终止条件。

  递归使用条件：
  1. 问题可以划分为规模更小的子问题。
  2. 子问题的解法与原问题相同。
  3. 递归有终止条件。

  递归解法三个步骤：
  1. 拆解问题，看似否符合递归的使用条件，找到可以递归的子问题。
  2. 递归逻辑，其实就是递归函数中的主要代码。
  3. 终止条件，找到“递”的终止条件，也就是递归函数最开始的那部分代码。

  递归解法优化：
  + 记录中间结果，比如 DFS 优化：记忆化搜索哦，降低时间复杂度（指数级->多项式）。

  递归模板：
  + 终止条件
  + 处理当前层逻辑
  + 下探到下一层
  + 清理当前层

  #+BEGIN_SRC python
def recursion(level, param1, param2):
    # 1. recursion terminator
    if level > MAX_LEVEL:
        process_reult
        return
    # 2. process logic in current level
    process(leve, data)

    # 3. drill down
    self.recursion(level + 1, p1, param2)

    # 4. reverse the current level status if needed
  #+END_SRC

** [[https://leetcode-cn.com/problems/reverse-linked-list/][206 反转链表]]

** [[https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/][104 二叉树的最大深度]]

** [[https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/][111-二叉树的最小深度]]

** 二叉树的遍历

** [[https://leetcode-cn.com/problems/invert-binary-tree/][226 翻转二叉树]]

** [[https://leetcode-cn.com/problems/symmetric-tree/][101 对称二叉树]]

** [[https://leetcode-cn.com/problems/balanced-binary-tree/][110 平衡二叉树]]

** [[https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/][108-将有序数组转换为二叉搜索树]]

** [[https://leetcode-cn.com/problems/n-queens/][51 N皇后]]

* 第八课 分治(divide&&conquer)、回溯（backtracing）
  分治和回溯本质上也是递归。

  递归拆分以后的子问题都是相同的解法。

  分治，原问题拆分以后有多个子问题，子问题可能有不同的解法。

  回溯是指在递归的过程中增加了条件判断，避免了一些无效递归。

** [[https://leetcode-cn.com/problems/powx-n/][50-pow]]

** [[https://leetcode-cn.com/problems/generate-parentheses/][22 括号生成]]

** [[https://leetcode-cn.com/problems/subsets/][78-子集]]

** [[https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/][17 电话号码组合]]

** [[https://leetcode-cn.com/problems/majority-element/description/][169 众数]]

** [[https://leetcode-cn.com/problems/n-queens/][51-N皇后]]

* 第九课 深度优先和广度优先

** DFS（深度遍历）
  #+BEGIN_SRC python
def DFS(node,visited):
    if node in visited:
        return

    visited.add(node)

    for next_node in node.children():
        if not next_node in visited:
            dfs(next_node,visited)

  #+END_SRC

** BFS（广度遍历）
   #+BEGIN_SRC python
def BFS(root):
    queue = []
    queue.append(root)

    while queue:
        node = queue.pop()

        process(node)

        nodes = generate_related_nodes(node)

        queue.push(nodes)
   #+END_SRC

** [[https://leetcode-cn.com/problems/binary-tree-level-order-traversal/][二叉树的层序遍历]]

* 第十课 贪心算法

* 第十一课 二分查找

* 第十二课 动态规划
