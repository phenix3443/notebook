# -*- coding:utf-8-*-
#+TITLE: lua-resty-mysql
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com
* 概述
  [[https://github.com/openresty/lua-resty-mysql#set_keepalive][lua-resty-mysql]] 是基于 cosocket API 的 ngx_lua 的 Lua MySQL 客户端驱动程序。

* 方法
** new

** connect
   #+BEGIN_EXAMPLE
   syntax: ok, err, errcode, sqlstate = db:connect(options)
   #+END_EXAMPLE

   options：
   + pool

     MySQL 连接池的名称。如果省略，将使用字符串模板 =user:database:host:port= 或 =user:database:path= 自动生成不明确的池名称。 （此选项最初是在 v0.08 中引入的。）。在实际解析主机名并连接到远程后端之前，此方法将始终在连接池中查找先前调用此方法所创建的匹配空闲连接。

     当连接池超过大小限制时，池中已经最近使用的（空闲）连接将自动关闭，以便为当前连接腾出空间。

** set_timeout
   #+BEGIN_EXAMPLE
   syntax: db:set_timeout(time)
   #+END_EXAMPLE

   为后续操作设置超时（以毫秒为单位）保护，包括 connect 方法。可以防止 mysql 操作时间过长。

** set_keepalive
   #+BEGIN_EXAMPLE
   syntax: ok, err = db:set_keepalive(max_idle_timeout, pool_size)
   #+END_EXAMPLE

   将当前的 MySQL 连接立即置于 ngx_lua cosocket 连接池中。 您可以指定连接在池中时的最大空闲超时（以毫秒为单位）以及每个 *nginx 工作进程* 的池的最大大小。

   如果成功，则返回 1. 如果出现错误，返回 nil，并携带描述错误的字符串。

   只在调用 close 方法的位置调用此方法。 调用此方法会立即将当前的 resty.mysql 对象转换为关闭状态。 当前对象上除 connect() 之外的任何后续操作都将返回已关闭的错误。

   注意：
   + mysql 连接池是的工作范围是 nginx worker，多个请求处理过程可以使用连接池中的链接。在高并发下，连接池能大大的减少连接 MySQL 和 Redis 的次数，明显的提升性能。

** get_reused_times
   #+BEGIN_EXAMPLE
   syntax: times, err = db:get_reused_times()
   #+END_EXAMPLE

   此方法返回当前连接的（成功）重用次数。 如果出现错误，则返回 nil 和描述错误的字符串。

   如果当前连接不是来自内置连接池，则此方法始终返回 0，即，连接从未被重用（尚未）。 如果连接来自连接池，则返回值始终为非零。 因此，此方法也可用于确定当前连接是否来自池。

   注意：
   + 可以使用该函数做性能调试，调整 set_keepalive 中的两个参数。

** close

** query
   #+BEGIN_EXAMPLE
   syntax: res, err, errcode, sqlstate = db:query(query)
   syntax: res, err, errcode, sqlstate = db:query(query, nrows)
   #+END_EXAMPLE
   这是组合 send_query 调用和第一个 read_result 调用的快捷方式。

   成功返回的情况下，应该始终检查返回值 err 是否为 again，因为此方法只会调用 read_result 一次。

* 限制
  + 此库不能用于 init_by_lua *，set_by_lua *，log_by_lua * 和 header_filter_by_lua *，这些地方 ngx_lua cosocket API 不可用。
  + resty.mysql 对象实例不能存储在 Lua 模块级别的变量中，因为它将由同一个 nginx 工作进程处理的所有并发请求共享（请参阅 [[https://github.com/openresty/lua-nginx-module#data-sharing-within-an-nginx-worker][data-sharing-within-an-nginx-worker]]）， 当并发请求尝试使用相同的 resty.mysql 实例时导致不良竞争条件。 您应该始终在函数局部变量或 ngx.ctx 表中启动 resty.mysql 对象。 这些地方每个请求都有各自的数据副本。

* 类封装 resty.mysql

  一个错误的封装示例：https://groups.google.com/forum/#!topic/openresty/JDN9yFzfY7k
