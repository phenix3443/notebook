# -*- coding:utf-8 -*-
#+TITLE:yasnippet mode
#+author: 刘尚亮
#+email:phenix3443+github@gmail.com

* 概述
  [[https://github.com/capitaomorte/yasnippet][Yasnippet]] 是 Emacs 的模板系统。它可以将输入的缩写扩展为函数模板。绑定的语言模板包括  C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS 等等。snippet 语法来自 TextMate 语法，甚至可以导入 TextMate 的大多数模板。


* 快捷键
  + M-x yas-new-snippet, key bindind: C-c & C-n

    新建 snippet

  + M-x yas-visit-snippet-file, key binding: C-c & C-v

    查看已有的 snippet

  snippet 相关的操作会在 snippet-mode 中进行。snippet-mode 中可以有如下命令：

  + M-x yas-load-snippet-buffer, key binding: C-c C-l

    提示一个 snippet table（默认是 snippet 的 major mode），并加载当前正在编辑的 snippet。

  + M-x yas-load-snippet-buffer-and-close, key binding: C-c C-c

    类似 yas-load-snippet-buffer，但还会保存 snippet 并调用 quit-window。

  + M-x yas-tryout-snippet, key binding: C-c C-t

    编辑 snippet 时，会打开一个新的空缓冲区，将其设置为适当的 major mode 在其中插入代码片段，以便查看它的外观。此功能可以用来方便的调试正在编辑的 snippet。

* 文件内容

  snippet 通常包含要展开的模板内容。

  如果文件包含一行 =＃--= ，则它上面的行将被视为注释，其中一些可以是指令（或元数据）。snippet 指令看起来像 =＃property：value= ，可以调整下面描述的 snippet 属性。如果找不到 =＃--= ，则整个文件被认为是片段模板。

  以下是一个典型示例：
  #+BEGIN_EXAMPLE
# contributor: pluskid <pluskid@gmail.com>
# name: __...__
# --
__${init}__
  #+END_EXAMPLE

** # key: snippet abbrev

   这可能是最重要的指令，它是在键入运行 *yas-expand* 之前展开代码段的缩写。如果不指定该项，snippet 不能通过触发机制来扩展。

** # name: snippet name
   这是 snippet 的单行描述。它将显示在菜单中。为 snippet 选择描述性名称是一个不错的主意 - 尤其是可用于和类似 snippet 加以区分。

   如果省略该名字，它将默认为加载 snippet 的文件名。

** # condition: snippet condition

   这是 Emacs-lisp 代码片段。如果一个 snippet 有一个条件，那么只有当条件代码求值为非零值时才会扩展。

** # group: snippet menu grouping
   当从菜单栏菜单展开/访问 snippet 时，给定模式的 snippet 可以分组到子菜单中。这可以避免有过多 snippet 的 mode 菜单过长。

   =＃group：= 属性只影响菜单结构（请参阅[[https://joaotavora.github.io/yasnippet/snippet-menu.html][ YASnippet]] 菜单），通过将 snippet 分组到子目录中并使用 =.yas-make-groups= 特殊文件可以实现相同的效果（有关此内容，请参阅[[https://joaotavora.github.io/yasnippet/snippet-organization.html][Organizing Snippets]]）

   有关 =＃group：= 指令的示例，请参阅的 =ruby-mode= 代码片段。Group 也可以嵌套，例如， =structure.loops= 说明 snippet 位于 loop group 下，而 loop 位于 Control structure Group 下。

** # expand-env: expand environment
   这是另一个 Emacs-lisp 代码片段，以 =let varlist= 形式出现，例如一个列出给变量赋值的列表。可以用来在 snippet 扩展时覆盖变量值。
   #+BEGIN_EXAMPLE
# name: ASCII home
# expand-env: ((yas-indent-line 'fixed) (yas-wrap-around-region 'nil))
# --
                welcome to my
            X      humble
           / \      home,
          /   \      $0
         /     \
        /-------\
        |       |
        |  +-+  |
        |  | |  |
        +--+-+--+
   #+END_EXAMPLE

** # binding: direct keybinding
   您可以使用此指令直接从正常的 Emacs 键绑定扩展 snippet。键盘绑定将被注册在 Emacs 键盘映射表中，该键盘映射以 snippet 生效的主模式命名。

   另外，变量 yas-prefix 被设置为常用命令的前缀参数。这允许在相同的 snippet 有小的变化，例如在这个“html-mode”片段。

   #+BEGIN_EXAMPLE
# name: <p>...</p>
# binding: C-c C-c C-m
# --
<p>`(when yas-prefix "\n")`$0`(when yas-prefix "\n")`</p>
   #+END_EXAMPLE
   该绑定将被记录在 html-mode-map 中。要扩展段落标签换行符，只需按 C-u C-c C-c C-m。省略 C-u 将会扩展段落标签而不换行。

** # type: snippet or command
   如果 type 指令被设置为 command，则 snippet 的主体被解释为 lisp code，并在触发 snippet 时候求值。

   如果该值是 snippet（没有 type 指令时的缺省值），则 snippet 正文将根据下面描述的模板语法进行分析。

** # uuid: unique identifier
   这提供了一种识别 snippet 的方式，与名称无关。使用相同的 uuid 加载第二个 snippet 文件将替换之前的 snippet。

** # contributor: snippet author
   这是可选的，对 snippet 功能没有任何影响，但看起来不错。

* 模板语法
  snippet 模板的语法很简单但功能强大，与 TextMate 非常相似。

** Plain Text
   可以包含任意文本作为模板的内容。它们通常被解释为纯文本，除了 =$= 和 =`= 。您需要使用 =\= 来转义它们： =\$= 和 =\`= 。 =\= 本身也可能需要 =\\= 进行转义。

** Embedded Emacs-lisp code
   Emacs-Lisp 代码可以嵌入到模板内部，写在反引号（`）中。当 snippet 被展开时，将求值 lisp 表达式。求值在 snippet 展开的 buffer 中完成。

   下面是一个用于动态计算头文件防护的 c 模式示例：
   #+BEGIN_EXAMPLE
#ifndef ${1:_`(upcase (file-name-nondirectory (file-name-sans-extension (buffer-file-name))))`_H_}
#define $1

$0

#endif /* $1 */
   #+END_EXAMPLE
   从版本 0.6 开始，snippets 扩展会运行一些特殊的 Emacs-lisp 变量。其中之一是 =yas-selected-text= 。因此，可以定义一个片段，如：
   #+BEGIN_EXAMPLE
for ($1;$2;$3) {
  `yas-selected-text`$0
}

   #+END_EXAMPLE
   在最近插入的代码片段中“包装”选定的区域。另外，你也可以将 =yas-wrap-around-region= 设置为 t 来自动执行此功能。

   *注意：反引号表达式不应修改缓冲区*

   请注意，反引号中的 lisp 表单不应修改缓冲区，否则会触发警告。例如，不应该这么做：
   #+BEGIN_EXAMPLE
Timestamp: `(insert (current-time-string))`
   #+END_EXAMPLE
   而是：
   #+BEGIN_EXAMPLE
Timestamp: `(current-time-string)`
   #+END_EXAMPLE
   警告可能会被 init 文件中的下列代码所抑制：
   #+BEGIN_SRC elisp
(add-to-list 'warning-suppress-types '(yasnippet backquote-change))
   #+END_SRC

** Tab stop fields
   tab stop 是可以通过 TAB 和 S-TAB 来回导航的字段。它们是 =$= 后跟一个数字。 =$0= 具有 snippet 出口点的特殊含义。当遍历完所有的字段后，这是最后的去处。这是一个典型的例子：

   #+BEGIN_EXAMPLE
<div$1>
    $0
</div>
   #+END_EXAMPLE

** Placeholder fields
   tab stop 可有一个默认值--a.k.a 占位符。语法是这样的：
   #+BEGIN_EXAMPLE
${N:default value}
   #+END_EXAMPLE
   它们充当 tab stop 的默认值。但是，当您首先键入 tab stop 时，默认值将被您的输入替换。如果您不想为该字段创建 mirrors 或 transformations，则可以省略该字段。

** Mirrors
   带有占位符的 tab stop 当成一个字段。字段可以有 mirror。当更改字段的文本时，它的 mirror 将会更新。这是一个例子：
   #+BEGIN_EXAMPLE
\begin{${1:enumerate}}
    $0
\end{$1}
   #+END_EXAMPLE
   当在 =${1：enumerate}= 处键入“document”时，单词“document”也将被插入到 =\end{$1}= 中。

   与字段相同的数字 tab stop 作为镜像。如果任何 tab stop 都没有初始值，则第一个 tab stop 将被选作字段而其他 tab stop 为 mirror。

** Mirrors with transformations
   如果 =${n：= 结构的的值以 =$= 开头，并且包含 =$()= ，那么它将被解释为字段 n 带有转换（transformations）的 mirror。mirror 的文本内容是根据这个转换来计算的，该转换是在一个环境中求值的 Emacs-lisp 代码。同时在该环境中，变量 =yas-text= 绑定到字段 n 中包含的文本内容。下面是一个 Objective-C 的例子：

   #+BEGIN_EXAMPLE
- (${1:id})${2:foo}
{
    return $2;
}

- (void)set${2:$(capitalize yas-text)}:($1)aValue
{
    [$2 autorelease];
    $2 = [aValue retain];
}
$0
   #+END_EXAMPLE
   看 =${2:$(capitalize yas-text)}= ，它是一个带有转换的镜像而不是一个字段。实际的字段在第一行： =${2:foo}= 。当在 =$ {2:foo}= 中键入文本时，转换将被求值，结果将被作为转换后的文本放置在那里。所以在这个例子中，如果在 field 中输入“baz”，转换的文本将是“Baz”。


   另一个例子是 rst-mode。reStructuredText 中，文档标题可以是下面和上面的由“=”包围的一些文本。 “=”应该至少与文本一样长。所以
   #+BEGIN_EXAMPLE
=====
Title
=====
   #+END_EXAMPLE
   是有效的，但
   #+BEGIN_EXAMPLE
===
Title
===
   #+END_EXAMPLE
   不是。下爱面是 rst 标题的一个 snippet：
   #+BEGIN_EXAMPLE
${1:$(make-string (string-width yas-text) ?\=)}
${1:Title}
${1:$(make-string (string-width yas-text) ?\=)}

$0
   #+END_EXAMPLE
** Fields with transformations
   从 0.6 版本开始，也可以在字段里面进行 lisp 转换。这些工作主要与转换类似，但是第一次输入该字段，每次改变字段，以及在你退出该字段时才会求值。

   语法也有点不同，所以解析器可以区分 field 和 mirror。在下面的例子中

   #+BEGIN_EXAMPLE
#define "${1:mydefine$(upcase yas-text)}"
   #+END_EXAMPLE
   一旦输入该字段，mydefine 会自动升级到 MYDEFINE。当你输入文本时，每次都会通过转换过滤。

   请注意，这种表达式为和与带转化的 mirror 区别，YASnippet 需要在 =:= 和转换的 =$= 之间添加额外的文本。如果你不想要这个额外的文字，你可以使用两个 =$= 。
   #+BEGIN_EXAMPLE
#define "${1:$$(upcase yas-text)}"
   #+END_EXAMPLE
   请注意，只要转换发生，它就会更改 field 的值，并将其内部修改状态设置为 true。因此，正常字段的自动删除行为不会发生。就是这么设计的。

** Choosing fields value from a list and other tricks
   如前所述，在输入字段后调用 field 转换，并且绑定了一些有用的变量，特别是 =yas-modified-p= 和 =yas-moving-away-p= 。因此，可以在主字段中放置一个转换，使您可以为其选择默认值。

   看看 yas-choose-value 的定义，看看它是如何使用这两个变量来编写的。

   这里还有一个用于 LaTeX-mode 的例子，正如输入 snippet 字段 2 一样调用 reftex-label。这个方法直接使用 =yas-modified-p= 。

   #+BEGIN_EXAMPLE
\section{${1:"Titel der Tour"}}%
\index{$1}%
\label{{2:"waiting for reftex-label call..."$(unless yas-modified-p (reftex-label nil 'dont-
insert))}}%
   #+END_EXAMPLE
   函数 yas-verify-value 有另一个巧妙的技巧，并且使用 yas-moving-away-p。可以在[[http://groups.google.com/group/smart-snippet/browse_thread/thread/282a90a118e1b662][thread]] 试试。

** Nested placeholder fields
   从 0.6 版本开始，也可以类型嵌套占位符：
   #+BEGIN_EXAMPLE
<div${1: id="${2:some_id}"}>$0</div>
   #+END_EXAMPLE
   这允许你选择是否给这个 div 一个 id 属性。如果您在展开之后向前移动，则可以将“some_id”更改为任何您喜欢的内容。或者，可以按 C-d（执行 =yas-skip-and-clear-or-delete-char= ）并直接转到出口标记。

** Indentation markers
   如果yas-indent-line未设置为“auto”，则仍然可以通过在线上某处添加缩进标记$>来缩进。
