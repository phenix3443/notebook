# -*- coding:utf-8 -*-
#+title:redis sentinel documentation
#+author: 刘尚亮
#+email:phenix3443@gmail.com

redis sentinel 为 redis 提供高可用，部署之后可以自动对 redis 实例进行故障迁移。宏观上它可以做如下事情：
+ 监控（Monitoring）：Sentinel 会不断地检查主实例和从实例是否正常。
+ 通知（Notification）： 当被监控的某个 Redis 实例出现问题时，Sentinel 进程可以通过 API 向管理员或者其他应用程序发送通知。
+ 自动故障迁移（Automatic failover）： 当一个主 redis 实例失效时，Sentinel 会开始进行一次 failover， 它会将失效主实例的其中一个从实例升级为新的主实例， 并让其他从实例从新配置，使用新的主实例。向新的客户端链接返回新的主实例的地址。
+ 配置来源。sentinel 作为客户端服务的认证来源：客户端连接 sentinel 来获取给定服务的当前 redis 服务。如果发生故障迁移，sentinel 会报告新的地址。

* sentinel 的分布式本质

* 快速开始
** 安装
** 运行
   当前 Redis stable 版已经自带了 redis-sentinel 这个工具。虽然 Redis Sentinel 已经提供了一个单独的可执行文件 redis-sentinel， 但实际上它只是一个运行在特殊模式下的 Redis 实例， 你可以在启动一个普通 Redis 实例时通过给定 –sentinel 选项来启动 Redis Sentinel 实例。也就是说：
   #+BEGIN_SRC sh
redis-sentinel /path/to/sentinel.conf
   #+END_SRC
   等同于
   #+BEGIN_SRC sh
redis-server /path/to/sentinel.conf --sentinel
   #+END_SRC

   其中 sentinel.conf 是 redis 的配置文件，Redis sentinel 会需要写入配置文件来保存 sentinel 的当前状态。当配置文件无法写入时，Sentinel 启动失败。

   当运行 sentinel 时候必须要指定配置文件。

** 部署前需要的基础知识
   1. 健壮性的部署至少需要 3 个 sentinel 实例。
   2. sentinel 实例应该部署在各自独立的机器上。
   3. sentinel 并不能保证故障产生时，接到到写入数据能保留下来，但是可以通过一些方法进行部署，让丢失的写数据限定在一定范围。
   4. 应用程序的客户端需要支持 sentinel。
   5. 没有建立 HA
   6. sentinel 和 docker，NAT 等地址转换或者端口映射一起使用的时候要特别注意：这些功能破坏了 sentinel 自动发现其他的 sentinel 进程和 redis 主实例的相关从实例。

** 配置
   #+BEGIN_EXAMPLE
sentinel monitor mymaster 127.0.0.1 6379 2
sentinel down-after-milliseconds mymaster 60000
sentinel failover-timeout mymaster 180000
sentinel parallel-syncs mymaster 1
   #+END_EXAMPLE

   只需要指定要监听的主实例的即可，其他的从实例会自动发现。sentinel 会自动更新其他从实例的信息，以便重启时使用。每次故障迁移后选举处一个新的 master，或者每次发现新的 sentinel 都会重写该配置。
   #+BEGIN_EXAMPLE
sentinel monitor <master-group-name> <ip> <port> <quorum>
   #+END_EXAMPLE

   第一行配置指示 Sentinel 去监视一个名为 mymaster 的主 redis 实例， 这个主实例的 IP 地址为本机地址 127.0.0.1， 端口号为 6379，

   quorum 表示将这个主实例判断为失效至少需要 2 个 Sentinel 进程的同意，只要同意 Sentinel 的数量不达标，自动 failover 就不会执行。同时，一个 Sentinel 都需要获得系统中大多数 Sentinel 进程的支持， 才能发起一次自动 failover， 并预留一个新主实例配置的编号。而当超过半数 Redis 不能正常工作时，自动故障转移是无效的。

*** 其他配置选项
	#+BEGIN_EXAMPLE
sentinel <option_name> <master_name> <option_value>
	#+END_EXAMPLE

   + down-after-milliseconds

	 该选项指定了 Sentinel 认为 Redis 实例已经失效所需的毫秒数。具体的行为如下：

	 + 每个 Sentinel 每秒一次向它所监控的主实例、从实例以及其他 Sentinel 实例发送一个 PING 命令。当一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 那么这个实例会被 Sentinel 标记为主观下线（subjectively down，简称 SDOWN）。如果一个主实例被标记为主观下线， 并且有足够数量的 Sentinel（至少要达到配置文件指定的数量）在指定的时间范围内同意这一判断，n 那么这个主实例被标记为客观下线（objectively down， 简称 ODOWN）。

	 + 在一般情况下， 每个 Sentinel 进程会以每 10 秒一次的频率向它已知的所有主实例和从实例发送 INFO 命令。 当一个主实例被 Sentinel 实例标记为客观下线时，Sentinel 向下线主实例的所有从实例发送 INFO 命令的频率会从 10 秒一次改为每秒一次。

	 + 当没有足够数量的 Sentinel 同意主实例已经下线， 主 Redis 服务实例的客观下线状态就会被移除。 当主服务器重新向 Sentinel 的 PING 命令返回有效回复时， 主服务器的主观下线状态就会被移除。

   + parallel-syncs

	 该选项指定了在执行故障转移时， 最多可以有多少个从 Redis 实例配置使用新的主实例， 该值越小，完成故障迁移的时间越长。但是，如果从站配置为提供旧数据，则可能不希望所有从站同时与主站重新同步。虽然复制过程对于从实例是非阻塞的，但是从主设备加载批量数据是从实例也是停止服务的。您可能希望通过将此选项设置为 1 来确保一次只有一个从实例不能访问。

	 尽管复制过程的绝大部分步骤都不会阻塞从实例， 但从 redis 实例在载入主实例发来的 RDB 文件时， 仍然会造成从实例在一段时间内不能处理命令请求：如果全部从实例一起对新的主实例进行同步， 那么就可能会造成所有从 Redis 实例在短时间内全部不可用的情况出现。

	 所以从实例被设置为允许使用过期数据集，（参见对 redis.conf 文件中 slave-serve-stale-data 选项），可以缓解所有从实例都在同一时间向新的主实例发送同步请求的负担。你可以通过将这个值设为 1 来保证每次只有一个从 Redis 实例处于不能处理命令请求的同步状态。

   + failover-timeout

	 如果在该时间（ms）内未能完成 failover 操作，则认为该 failover 失败。

   + notification-script

	 指定 sentinel 检测到该监控的 redis 实例指向的实例异常时，调用的报警脚本。该配置项可选，但是很常用。

* sentinel 部署示例

* 快速教程
* 添加删除 sentinel
** 添加
   批量添加 sentinel 的时候要依次添加，间隔 30s。
** 删除
   Sentinels never forget already seen Sentinels。

   1. Stop the Sentinel process of the Sentinel you want to remove.
   2. Send a SENTINEL RESET * command to all the other Sentinel instances (instead of * you can use the exact master name if you want to reset just a single master). One after the other, waiting at least 30 seconds between instances.
   3. Check that all the Sentinels agree about the number of Sentinels currently active, by inspecting the output of SENTINEL MASTER mastername of every Sentinel.

* 删除旧的 master 或不可用的 slave
  Sentinels never forget about slaves of a given master, even when they are unreachable for a long time。
