# -*- coding:utf-8-*-
#+TITLE: Emas Lisp语言总结
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com
#+startup:overview

* 简介
** 起源
** 优点
** 特性
** 语言文化
* 程序结构
** 注释
   使用分号 =;= 作为注释的开始。
   #+BEGIN_SRC elisp
;这是一行注释
   #+END_SRC

** token
*** 字面量
**** 整数常量
     #+BEGIN_SRC
integer,
     #+END_SRC
**** 浮点常量
     #+BEGIN_SRC
float,cons
     #+END_SRC
**** 字符常量
     其实就是integer，字面量表示前面要加 =?= ，表示标点符号和特殊修饰符前面要加 =\= 。

     #+BEGIN_SRC elisp
?A ?\( ?\\ ?\C-M-a
     #+END_SRC
**** 字符串常量
     单双引号区别
     #+BEGIN_SRC elisp

     #+END_SRC
**** cons
     #+BEGIN_SRC elisp
'(a . b)
     #+END_SRC
*** 标识符
    标识符是用来标识变量、函数或其他 *用户自定义* 项目的名称。如常量名、变量名、函数名。

    标识符作为变量，其实是一块内存区域的别名。

    elisp中的标识符（也叫symbol），可以同时保存数值、函数名称或属性列表。

**** 常量
     名称以冒号（'：'）开头的符号称为关键字符号（key symbol）。这些符号自动作为常量使用。
**** 变量
     #+BEGIN_SRC

     #+END_SRC

**** 作用域
     #+BEGIN_SRC

     #+END_SRC
**** 生存期
     #+BEGIN_SRC

     #+END_SRC
*** 关键字
    语言保留，不能做标识符。

*** 运算符
    需要注意的是优先级和结合律。

**** 算数运算符
     加、减、乘、除、mod、自增、自减
     #+BEGIN_SRC

     #+END_SRC
**** 位运算符
     #+BEGIN_SRC

     #+END_SRC
**** 关系运算符
     gt,ge,lt,le,eq,noteq
     #+BEGIN_SRC

     #+END_SRC
**** 逻辑运算符
     #+BEGIN_SRC

     #+END_SRC
**** 赋值运算符
     #+BEGIN_SRC

     #+END_SRC
**** 其他
     #+BEGIN_SRC

     #+END_SRC

** 表达式
   表达式可以求值。与其他语言不同，elisp中没有语句的概念，表达式就是执行单位。

   表达式可以是list，或者是字面常量。
   #+BEGIN_SRC elisp
()
(message "hello,elisp")
fill-column
"message"
7
nil
  #+END_SRC

*** 声明，定义，赋值
    elisp中变量不需要预先声明和定义。
**** set
**** setq
**** let
    #+BEGIN_SRC elisp
(let ((welcome "hello,elisp"))
  (message welcome))
    #+END_SRC
**** defvar
    用来创建并初始化变量，但是与setq有两点不同：
    + 如果变量没有值，才设置变量的值。
    + defvar有文档字符串。

    #+BEGIN_SRC elisp
        (defvar symbol init-val
          "document")
    #+END_SRC
**** defcustom
    尽量使用该macro来定义定制（customizable）变量，这样这些变量可以在Customization命令界面中可以定制。

**** set-variable
    该命令用来修改变量的值，但是这种改变只在当次session中有效。

*** 分支控制
**** 分支
***** if-else
     #+BEGIN_SRC elisp
(if (> 5 4)
    (message "then part")
  (message "else part"))
   #+END_SRC

***** unless
     #+BEGIN_SRC elisp

     #+END_SRC
***** condition-case
    类似于try-catch
     #+BEGIN_SRC elisp

     #+END_SRC

***** when

     #+BEGIN_SRC elisp

     #+END_SRC

**** 循环
***** while
      while的返回值是true-false判断表达式，所以正常的while循环的返回值始终是false。

***** dolist

***** dotimes


**** 跳转
     #+BEGIN_SRC elisp

     #+END_SRC

** 函数
   使用 =defun= 定义函数，函数总共有5个部分：
   #+BEGIN_SRC elisp
      (defun fun-name(param)
        "doc string"
        (interactive "p")
        (message "function body"))
  #+END_SRC

*** 参数默认值
*** 可变参数

** 模块
   使用require引用模块。

* 类型系统
** 整型
   #+BEGIN_SRC

   #+END_SRC
** 浮点型
   #+BEGIN_SRC

   #+END_SRC
** 复数
   #+BEGIN_SRC

   #+END_SRC
** 字符
   #+BEGIN_SRC

   #+END_SRC
** 布尔
   #+BEGIN_SRC

   #+END_SRC
** 空类型
   #+BEGIN_SRC

   #+END_SRC
** 存储类型
   #+BEGIN_SRC

   #+END_SRC
   指针与引用
** 复合类型
   #+BEGIN_SRC

   #+END_SRC

** 自定义
*** 类型别名
    #+BEGIN_SRC

    #+END_SRC

** 类型转换
*** 自动转换

* 数据结构
** 顺序
*** array

   #+BEGIN_SRC elisp
[1 2 3]
   #+END_SRC

*** list

   #+BEGIN_SRC elisp
'(one two three)
   #+END_SRC

*** vectors
    #+BEGIN_SRC elisp

    #+END_SRC

*** bool-vectors

** 关联
*** char-tables
*** hash-tables
    字典，集合
    #+BEGIN_SRC elisp

    #+END_SRC

** 迭代
   #+BEGIN_SRC

   #+END_SRC

* 错误处理
* 编码规范
* 高级语言特性
** 闭包
** 模板
** 函数重载
** 反射

* 程序库
** 內建函数
*** list相关函数
    cons car cdr nth nthcdr setcar setcdr length push
** 通用函数
** 数据类型
** 字符串
** 输入输出
** 文件
** 日期
** 日志
** 数学
* 参考书籍
** 入门
** 高级
** 实践
** 原理
* 安装运行
** 安装
** 运行
* 相关工具
** 标准命令
** 集成开发
** 静态检查
** 构建编译
** 代码调试
** 内存检查
** 性能分析
** 自动测试
** 文档系统
** 包管理系统
** 其他工具
* 工程布局
