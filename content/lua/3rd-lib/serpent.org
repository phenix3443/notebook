# -*- coding:utf-8; -*-
#+title: serpent
#+author: 刘尚亮
#+email: phenix3443@gmail.com

* 概述
  [[https://github.com/pkulchenko/serpent][serpent]] 可以方便的使用缩进打印 lua table 结构。效果类似 Python 中：
  #+BEGIN_SRC python
  print(json.dumps(dicts,idents=4))
  #+END_SRC
* 使用
  #+BEGIN_SRC lua
local serpent = require("serpent")
local a = {1, nil, 3, x=1, ['true'] = 2, [not true]=3}
  #+END_SRC

** dump(a[, {...}])
   #+BEGIN_SRC lua
print(serpent.dump(a)) -- full serialization
local b = loadstring(serpent.dump(a))
print(serpent.line(b()))
   #+END_SRC
   结果：
   #+BEGIN_EXAMPLE
do local _={[1]=1,[3]=3,["true"]=2,x=1,[false]=3};return _;end
{1, [3] = 3, ["true"] = 2, x = 1, [false] = 3} --[[table: 0x1877b70]]
   #+END_EXAMPLE
   dump 利用 string.dump 可以将 lua obj 序列化，然后通过 loadstring 加载执行。

   或者直接使用 serpent.load 函数获得复制体：
   #+BEGIN_SRC lua
local ok,copy = serpent.load(serpent.dump(a))
lu.assert_equals(copy[3], a[3])
   #+END_SRC
** line(a[, {...}])
   #+BEGIN_SRC lua
print(serpent.line(a)) -- single line, no self-ref section
   #+END_SRC
   结果：
   #+BEGIN_EXAMPLE
{1, nil, 3, ["true"] = 2, x = 1, [false] = 3} --[[table: 0x1069560]]
   #+END_EXAMPLE

** block(a[, {...}])
   #+BEGIN_SRC lua
print(serpent.block(a,{indent="        "})) -- multi-line indented, no self-ref section
   #+END_SRC
   结果使用 indent 指定的字符串进行了缩进：
   #+BEGIN_EXAMPLE
{
        1,
        nil,
        3,
        ["true"] = 2,
        x = 1,
        [false] = 3
} --[[table: 0x207c260]]

   #+END_EXAMPLE

   line 和 block 还有一些其他参数可以设置显示效果，以及要忽略和允许的 key 或者 value。
