# -*- coding:utf-8-*-
#+TITLE: 10x 程序员工作法笔记
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com

本文是极客时间[[https://time.geekbang.org/column/intro/148][《10x 程序员工作法》]]笔记。

* 开篇词:程序员解决的问题，大多不是程序问题

  本质复杂度：解决一个问题时，无论怎么做都必须要做的事。

  偶然复杂度：因为选用的做事方法不当，而导致要多做的事。

  *大部分程序员忙碌解决的问题，都不是程序问题，而是由偶然复杂度导致的问题。*


* 10x 程序员是如何思考的？
  思考框架：
  + 现状
  + 目标
  + 路径

  实现原则：
  + 以始为终，避免 x-y 问题。
  + 任务分解
  + 沟通反馈
  + 自动化

* 如何让你的努力不白费？（以终为始）
  任何事物都要经过两次创造：头脑中的创造和付诸实践。

  *以终为始：遇到事情，倒着想。* 先确定最终目标，然后开始行动，以结果为导向。

  实践：计划倒排。

* 你完成了工作，为什么他们还不满意？（终的共识？）
  *做任何事之前，先定义完成的标准。*

  实践：DoD（Definition of Done）是一个思维模式，是一种尽可能消除不确定性，达成共识的方式。

  DoD 可以用来：
  + 确定功能需求点。
  + 明确开发进度。

* 接到需求任务，要先做哪件事？（如何定义终？）
  功能列表式需求描述过于琐碎，不能完整的描述需求场景。

  用户故事-一种新的需求描述方式：
  + 标题
  + 概述，简述故事主要内容。
  + 详述，故事完整流程。
  + 验收标准，给出了需求最基本的测试用例，保证开发人员需求最基本的质量。（很重要）

  有了验收标准，开发可以编写集成测试用例，测试也可以完成测试用例。

* 持续集成：集成本身就是写代码的一个环节（如何高效产生终）
  开发人员交付的是可运行的软件，不是代码。

  实践：尽早提交代码去集成。

* 精益创业：产品经理不靠谱，应该怎么办？（如何定义正确的终）

  *软件开发的方向是不确定的。* 所以需要产品经理对需求能做出合理的解释，预期以及度量方法。

  精益：理解价值创造与浪费之间的关系。简而言之，如何低成本的试错。

  实践：默认所有需求都不做，直到弄清楚为什么要做这件事。

* 解决了很多技术问题，为什么你还在坑里？（高层级的终）
  不同角色工作上的真正差异是上下文的不同。

  有些技术问题完全可以通过对需求的理解解决（绕过去）。

  跳出程序员角色思维，扩大自己工作的上下文。不要独善其身，眼光要长远和提高层级。

* 为什么说做事之前要先进行推演？（避免无用的终）
  动手做事之前，先推演一番：
  + 清楚目标达成过程。
  + 避免努力白费。

* 你的工作量可以用数字衡量么？（可量化的终）
  实践：量化自己的工作。

* 启动开发之前，应该准备什么？（）
