# -*- coding:utf-8-*-
#+TITLE: 从 0 开始学架构
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com

本文是极客时间[[https://time.geekbang.org/column/intro/81][《从 0 开始学架构》]]笔记。

* 开篇词

  架构设计的关键思想是判断和取舍，程序设计的关键思维是逻辑与实现。

* 架构到底是什么？
  + 系统与子系统
    + 系统是相互协作可运行的实体。
  + 模块与组件
    + 组件是从技术维度上的复用。
    + 模块是从业务维度上职责的划分。
  + 框架与架构
    + 框架是面向变成或配置的半成品。
    + 架构软件的顶层设计。

* 架构设计的历史背景
  + 第一次软件危机引出了“结构化”编程。

    结构化程序的特点是抛弃 goto 语句，采用“自顶向下、逐步细化、模块化”的指导思想。本质上还是一种面向过程的设计思想。

    第一次软件危机的根源在于软件的“逻辑”变得非常复杂。

  + 第二次软件危机引出了“面向对象”编程。

    第二次软件危机的根源在于当时软件“扩展”变得非常复杂。

  + 软件架构的出现是因为软件的“规模”愈加庞大。

    当系统由许多部分组成时，整个系统的组织，也就是所谓的“软件架构”，导致了一系列新的设计问题。

* 架构设计的目的
  架构设计的主要目的是为了解决软件系统复杂度带来的问题。

  那么，如何做架构设计呢？就是要找到软件系统系统的的“复杂点”。

  常见架构设计错误：
  + 架构混乱。要分析需求，识别复杂点。
  + 照搬别人的架构。错在不同的系统复杂点不同，架构自然不同。
  + 贪大求全。架构设计并不是为了面面俱到，而是识别复杂点，针对性的解决问题。

* 复杂度来源：高性能
