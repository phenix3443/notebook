# -*- coding:utf-8-*-
#+TITLE: nginx 核心知识 100 讲 笔记
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com
#+STARTUP: overview

本文极客时间[[https://time.geekbang.org/course/intro/138][《nginx 核心只是 100 讲》]]学习笔记。

* 初识 nginx
** 课程综述
** nginx 适用于哪些场景
   + 静态资源服务
   + 反向代理服务：强大性能，缓存，负载均衡。
   + API 服务
** nginx 历史背景
** nginx 优点
   + 高并发，高性能
   + 可扩展性好
   + 高可靠性
   + 热部署
   + BSD 许可证
** nginx 四个主要组成部分
   + 可执行文件
   + 配置文件
   + access.log
   + error.log

** nginx 版本发布历史
** nginx 版本选择
** 编译适合自己的 nginx
   使用 docker 创建测试环境：
   #+BEGIN_SRC shell
docker run --name nginx-build -v /home/lsl/Downloads/nginx-1.14.2:/nginx-1.14.2 -p 9000:80 ubuntu /bin/bash
   #+END_SRC
   编译：
   #+BEGIN_SRC shell
apt update && apt install -y build-essential perl libpcre3-dev zlib1g-dev libssl-dev
cd /nginx-1.14.2 && ./configure && make && make install
/usr/local/nginx/sbin/nginx
   #+END_SRC
** nginx 配置文件通用语法
   + 指令，指令块
   + $ 引用参数
   + 时间和空间有单位
** nginx 命令行及演示
   + 重新加载配置
     #+BEGIN_SRC
nginx -s reload
     #+END_SRC
   + 热部署
     1. 备份旧二进制文件。
     2. 用新的二进制文件替换。
     3. 通知原有 master 进程热部署: src_shell[:exports code]{kill -USR2 old-master-pid}
     4. 新的 master，worker 进程启动。
     5. 通知原有 master 进程关闭 worker 进程：src_shell[:exports code]{kill -WINCH old-master-pid}
     6. 如果没有问题，关闭原有 master 进程：src_shell[:exports code]{kill -QUIT old-master-pid}
     7. 如果需要回退：src_shell[:exports code]{kill -USR1 old-master-pid}

   + 日志切割
     1. 重命名原有日志文件。在 linux 文件系统中，改名不会影响已经打开文件的写入操作，内核 inode 不变，就不会丢日志。
     2. 给 master 进程发送 reopen 信号：src_shell[:exports code]{kill -USR1 master-pid}

     日志按时间切割：
     1. 日志文件文件名使用日期变量名。（如何做？）
     2. 定期发送 reopen 信号。

** nginx 搭建静态资源服务器
   使用 docker-openresty 建立测试环境：
   #+BEGIN_SRC sh
docker run -d --restart always --name nginx-test \
-v $(pwd)/conf/vhosts:/etc/nginx/conf.d \
-v $(pwd)/logs:/usr/local/openresty/nginx/logs \
-v $(pwd)/html:/usr/local/openresty/nginx/html \
-p 8080:80  openresty/openresty:1.13.6.2-centos
   #+END_SRC

   相关指令：
   + alias
   + root
   + gzip
   + autoindex
   + index
   + limit_rate
   + log_format
   + access_log
   + error_log

** nginx 搭建具备缓存功能的反向代理服务
   相关命令：
   + upstream
   + proxy_pass
   + proxy_set_header
   + $host
   + $X-Real-IP
   + $X-Forword-For
   + $remote_addr
   + $proxy_add_x_forward_for
   + proxy_cache_path
   + proxy_cache
   + proxy_cache_valid
   + stream 代理 tcp 时，使用 proxy_protocol 协议获取客户端 IP？

** 用 GoAccess 实现可视化
   使用 goaccess 实时查看日志数据。

** 从网络原理来看 SSL 安全协议
** 对称加密与非对称加密
** SSL 证书的公信力是如何保证的
   tls 加密过程。
** SSL 协议握手时 nginx 性能瓶颈在哪里
   + 小文件，交换秘钥。
   + 大文件，非对称加密过程。
** 用免费 SSL 证书实现一个 HTTPS 站点
   可以使用 Let's Encrypte 生成免费的 SSL证书。
** 基于 OpenResty 用 Lua 语言实现简单服务
* nginx 架构基础
** nginx 的请求处理流程
   使用状态机来处理异步请求：
   + 传输层状态机
   + HTTP 状态机
   + MAIL 状态机

   静态资源可以缓存起来，还可以将代理转发到后端。
** nginx 的进程结构
   + 多进程模型
   + nginx 进程间使用共享内存通信。
   + 多个 worker 进程与 cpu 绑定，是为了减少 cpu 上缓存是失效的次数。

** nginx 进程结构实例演示
** 使用信号管理 nginx 父子进程
   master：
   + CHLD
   + TERM，INT
   + QUIT
   + HUP
   + USR1
   + USR2
   + WINCH

   worker 进程：
   + TERM，INT
   + QUIT
   + USR1
   + WINCH

   涉及命令：
   + iostat
   + fio 测试服务器最大性能。

** reload 重载配置文件的真相
** 热升级的完整流程
** 优雅的关闭 worker 进程
   主要针对 HTTP 请求：
   + 设置定时器。worker_shutdown_timeout。
   + 关闭监听句柄。
   + 关闭空闲链接。
   + 在循环中等待全部链接关闭。
   + 退出进程。

** 网络收发与 nginx 事件间的对应关系
** nginx 网络事件实例演示
** nginx 的事件驱动模型
** epoll 的优劣及原理
** nginx 的请求切换
   增加 nginx 进程优先级，使 cpu 分配较大的时间片。

   一个进程处理多个请求，在用户态做切换。

** 同步与异步，阻塞与非阻塞
   阻塞和非阻塞：业务执行流程。

   同步异步：编程方式，可以使用同步编写非阻塞流程。

** nginx 的模块究竟是什么
** nginx 模块分类
   + NGX_CORE_MODULE
     + events
     + http
     + mail
     + stream
     + core

   + NGX_CONF_MODULE

** nginx 连接池
   + worker_connections

** 内存池对性能的影响
   + 链接内存池 connection_pool_size
   + 请求内存池 request_pool_size

** 所有 worker 进程协同工作
   共享数据:
   + 共享内存
   + 自旋锁

   使用场景：
   + 红黑树
   + 单链表
   + lua_share_dict

** 共享内存工具：Slab 管理器
** 哈希表的 max_size 与 bucket_size 如何配置
** nginx 中最常用的容器：红黑树

** 使用动态模块提升运维效率

* 详解 HTTP 模块
** 冲突的配置指令以谁为准
   + 值指令：配置可以合并；同一指令子模块覆盖父模块。
   + 动作指令。

   通过阅读源码来确定指令如何生效。
** Listen 指令的用法
   + listen 指令

** 处理 HTTP 请求头部的流程
   + client_pool_size：512 accept 分配链接内存池。
   + client_header_timeout
   + client_header_buffer_size：1K， 从链接内存池分配。
   + request_pool_size:
   + large_client_header_buffer: 4 8K， 当 header > 1k 的时候，从请求内存池修改。

** nginx 中的正则表达式
   pcretest
** 如何找到处理请求的 server_name 指令块
   + 主域名：server_name_in_redirect
   + 泛域名
   + 加~前缀

   server 匹配顺序：
   + 精确匹配
   + =*= 在前的泛域名
   + =*= 在后的泛域名
   + 在文件中的顺序 正则匹配表达式域名。
   + default server

** HTTP 请求处理时的 11 个阶段
   + POST_READ：读取头部之后，realip
   + SERVER_REWRITE：rewrite
   + FIND_CONFIG
   + REWRITE：rewrite
   + POST_REWRITE
   + PREACCESS：limit_conn, limit_req
   + ACCESS:auth_basic,acess,auth_request
   + POST_ACCESS:
   + PRECONTENT：try_files
   + CONTENT：index,autoindex,concat
   + LOG：access_log
** 11 个阶段的顺序处理
** postread 阶段：获取真实客户端地址的 realip 模块

   + set_real_ip_from
   + real_ip_header

     要注意 realip 模块是如何从 x-forwarded-for 列表中获取真实 IP 的。

   + real_ip_recursive

     If recursive search is disabled, the original client address that matches one of the trusted addresses is replaced by the last address sent in the request header field defined by the real_ip_header directive. If recursive search is enabled, the original client address that matches one of the trusted addresses is replaced by the last non-trusted address sent in the request header field.

     如果禁用递归搜索，匹配其中一个可信地址的原始客户端地址，将替换为 real_ip_header 指令定义的请求头字段中发送的最后一个地址。 如果启用了递归搜索，则匹配其中一个可信地址的原始客户端地址，将替换为请求头字段中发送的最后一个非信任地址。


   代理设置：
   + proxy_add_x_forwarded_for

     the “X-Forwarded-For” client request header field with the $remote_addr variable appended to it, separated by a comma. If the “X-Forwarded-For” field is not present in the client request header, the $proxy_add_x_forwarded_for variable is equal to the $remote_addr variable.


** rewrite 阶段的 rewrite 模块：return 指令
   + return
   + error_page
** rewrite 阶段的 rewrite 模块：重写 URL
** rewrite 阶段的 rewrite 模块：条件判断

* 反向代理与负载均衡
* nginx 的系统层性能优化
* 从源码视角深入使用 Nginx 与 Openresty
