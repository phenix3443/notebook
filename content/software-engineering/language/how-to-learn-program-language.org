# -*- coding:utf-8-*-
#+TITLE:how to learn program language
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com
#+STARTUP: overview

* 简介
** 起源
** 优点
** 特性
** 语言文化
* 程序结构
** 总览
** 注释
   分为单行注释、多行注释和行内注释。
   #+BEGIN_SRC

   #+END_SRC

** 符号（token）
   主要分为：字面常量（分配的匿名内存区域），标识符（分配内存区域的别名），关键字，运算符。

*** 字面常量
    一般来说，字面常量都有对应的内置类型，否则，应该如何定义这些类型。

*** 标识符
    标识符是用来标识变量、函数或其他 *用户自定义* 项目的名称。如常量名、变量名、函数名。

    支持面向对象的语言，有的定义的标识符代表的就是一个对象，可以直接通过对象调用方法，如 Python，其实这可以理解为只是一个语法糖。

**** 作用域
     代码复用（函数，块）引入了作用域的概念。
     #+BEGIN_SRC

     #+END_SRC
**** 生存期
     内存分配回收引入了生存期的概念。
     #+BEGIN_SRC

     #+END_SRC

*** 关键字
    语言保留，不能做标识符。关键字主要用于指引编译器如何分配内存（与类型相关的关键字）以及程序如何执行（分支，跳转，循环）。

*** 运算符
    需要注意的是优先级和结合律。

**** 算数运算符
     加、减、乘、除、mod、自增、自减
     #+BEGIN_SRC

     #+END_SRC
**** 关系运算符
     gt,ge,lt,le,eq,noteq
     #+BEGIN_SRC

     #+END_SRC
**** 赋值运算符
     #+BEGIN_SRC

     #+END_SRC
**** 逻辑运算符
     #+BEGIN_SRC

     #+END_SRC
**** 位运算符
     #+BEGIN_SRC

     #+END_SRC
**** 其他
     三目运算符等。

     #+BEGIN_SRC

     #+END_SRC

** 表达式
   表达式可以求值，表明表达式可以作为右值。

** 语句
   语句是程序执行的最小逻辑单位。

   语句与表达式的区别：语句不一定可以求值。

   有的语言要求表达式以特定符号结尾，如 C/C++。

   表达式主要有以下作用：

*** 声明与定义
*** 赋值
*** 函数调用
    有些语言中，可以调用的不一定是函数，也有可能是对象（python，C++），或者仿函数（C++）。

*** 执行控制
**** 分支
     #+BEGIN_SRC
if-else switch-case-default
     #+END_SRC

**** 循环
     #+BEGIN_SRC
for while do-while
     #+END_SRC

**** 跳转
     #+BEGIN_SRC
break continue goto try-throw-catch return
     #+END_SRC

** 函数
*** 传参
    + 传值还是传引用
    + 参数默认值如何设置
    + 可变参数语法

*** 返回值
    + 返回值的作用域
    + 返回值数量

*** 闭包

*** 匿名函数

** 模块
   + 有的语言引入新的命名空间（C++ 的 namespace，Lua，Python），有的没有（C）
   + 有的语言有包（模块）管理工具，如 python 的 pip，lua 的 luarocks，golang 的 go get，nodejs 的 npm，有的则没有，如 C++。

* 类型系统
** 数值类型
   包括整数，浮点数，有的语言还扩展了虚数（如 python）等不常见的数值类型。

   有的语言根据表示范围和精度对整数和浮点数做了进一步划分（如 C/C++），有的则没有（如 Lua）。

   有些数值类型有对应的字面量表示方法，有的则没有（C/C++ uint32），这些数值类型的定义需要类型转换。

   #+BEGIN_SRC

   #+END_SRC
** 字符类型
   有些语言的字符类型是其他类型的别名（C/C++），字面量要注意两点：

   字符编码，如 utf-8
   #+BEGIN_SRC

   #+END_SRC

   转义字符

** 布尔类型
   有些语言的布尔类型是其他类型的别名，有些则是独立的类型。要注意其他类型和布尔类型的比较。
   #+BEGIN_SRC

   #+END_SRC
** 空类型
   有的语言有空类型，如 lua 和 golang 中的 nil，python 中的 None。
   #+BEGIN_SRC

   #+END_SRC

** 存储类型
   有的语言可以直接操作内存，如 C/C++中的指针。
   #+BEGIN_SRC

   #+END_SRC

** 自定义类型
   大多数语言都提供了工具可以自定义复杂的类型，如 C/C++中的 struct，Lua 中的 table，Python 中的 Class，golang 中的 struce 等。

   #+BEGIN_SRC

   #+END_SRC

   有的语言还提供了类型别名的方式，如 C/C++中的 typedef。

** 类型转换
   有的语言支持部分类型间的自动转换。

* 数据结构
  大部分语言都内置了一些简单的数据结构，如 C/C++ 的数组，Lua 的 table，Python 的 tuple、list，golang 的 map，slice。有的语言还可以通过外部工具库来支持（如 C++的 STL）。

  这些数据结构主要分为：
** 顺序
   #+BEGIN_SRC

   #+END_SRC
** 关联
   字典，集合
   #+BEGIN_SRC

   #+END_SRC

** 迭代
   #+BEGIN_SRC

   #+END_SRC

* 错误处理
  有的语言支持异常处理

* 编码规范

* 高级特性
** 闭包
** 模板
** 函数重载
** 反射

* 程序库
** 內建函数
   主要用来操作语言自带的数据类型。

** 通用函数
** 数据类型
** 字符串
** 输入输出
** 文件
** 日期
** 日志
** 数学
** unit test
   https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks

* 参考书籍
** 入门
** 高级
** 实践
** 原理
* 相关工具
** 安装运行
** 标准命令
** 集成开发
** 静态检查
** 构建编译
** 代码调试
** 内存检查
** 性能分析
** 自动测试
** 文档系统
** 包管理
** 其他工具
