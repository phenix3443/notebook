# -*- coding:utf-8-*-
#+TITLE: 原码反码补码理解
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com

原码、反码、补码都是说明计算机如何用二进制表示正数、负数和零。

* 原码
  原码（True form）：原码是一种计算机中对数字的二进制表示方法，数码序列中最高位为符号位，符号位为 0 表示正数，符号位为１表示负数；其余有效值部分用二进制的绝对值表示。
  + 0 符号位可以为 0 或 1。
  + 表示范围 =-2^{n-1}-1 ~ +2^{n-1}-1=

  | 绝对值 | 正数 | 负数 | 求和 | 十进制 |
  |--------+------+------+------+--------|
  |      0 |  000 |  100 | 100 | 0      |
  |      1 |  001 |  101 | 110  | -2     |
  |      2 |  010 |  110 | -    | -      |
  |      3 |  011 |  111 | -    | -      |
  |      4 |    - |    - | -    | -      |

  存在问题：
  + 求和结果不对。同一绝对值的正负数求和应该是 0。
  + 只能表示 7 个十进制数，因为 0 有两种表示法：000 和 100

* 反码
  反码（1's complement，在中国大陆称作反码，港台地区称为一补数）：如果机器数是正数，则该机器数的反码与原码一样；如果机器数是负数，则该机器数的反码是对它的原码（符号位除外）各位取反而得到的。
  + 0 表示为 000 和 111
  + 表示范围 =-2^{n-1}-1 ~ +2^{n-1}-1=

  | 绝对值 | 正数 | 负数 | 求和 | 十进制 |
  |--------+-----+------+------+--------|
  |      0 | 000 |  111 |  111 |      0 |
  |      1 | 001 |  110 |  111 |      0 |
  |      2 | 010 |  101 |  111 |      0 |
  |      3 | 011 |  100 |  111 |      0 |
  |      4 |   - |    - |    - |      0 |

  存在问题：
  + 只能表示 7 个十进制数，因为 0 有两种表示法：

* 补码
  补码（2's complement，在中国大陆称作补码，港台地区称为二补数）：如果机器数是正数，则该机器数的补码与原码一样；如果机器数是负数，则该机器数的补码是对它的原码（除符号位外）各位取反，并在末位加 1。
  + 表示范围 =-2^{n-1} ~ +2^{n-1}-1=
  + 补码系统的最大优点是可以在加法或减法处理中，不需因为数字的正负而使用不同的计算方式。只要一种加法电路就可以处理各种有号数加法，而且减法可以用一个数加上另一个数的补码来表示，因此只要有加法电路及补码电路即可完成各种有号数加法及减法，在电路设计上相当方便

  | 绝对值 | 正数 | 负数 | 求和 | 十进制 |
  |--------+------+------+------+--------|
  |      0 |  000 |  000 |  000 |      0 |
  |      1 |  001 |  111 |  000 |      0 |
  |      2 |  010 |  110 |  000 |      0 |
  |      3 |  011 |  101 |  000 |      0 |
  |      4 |    - |  100 |    - |      0 |
