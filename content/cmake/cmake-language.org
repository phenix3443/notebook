# -*- coding:utf-8 -*-
#+title:cmake language
#+author:phenix3443
#+email:phenix3443+github@gmail.com

* 组织(Organization)
  CMakeLists.txt 或用 =.cmake= 结尾的文件都作为 CMake 的输入文件，它们使用 “cmake language” 编写。

  项目中的 CMake 源文件组织为：
  + 目录 (CMakeLists.txt)
  + 脚本 (<script>.cmake)
  + 模块 (<module>.cmake)

** 目录(Directories)
   当 CMake 处理项目源代码树时，入口点是顶级目录中的 CMakeLists.txt。该文件可能包含整个构建规范，或使用 [[https://cmake.org/cmake/help/latest/command/add_subdirectory.html#command:add_subdirectory][add_subdirectory()]]命令将子目录添加到构建中。该命令添加的子目录还必须包含一个 CMakeLists.txt 文件作为该目录的入口点。CMake 处理 CMakeLists.txt 时，为会为其所在目录在构建树中生成对应的目录，来充当默认的工作和输出目录。

** 脚本(Scripts)
   <script>.cmake 源文件可以通过使用带有-P 选项的 cmake 命令行工具以脚本模式处理。脚本模式只运行给定的 CMake 语言源文件中的命令，不会生成构建系统。它不允许定义构建目标的命令或操作。

   #+BEGIN_SRC cmake
# script.cmake
foreach(arg
    NoSpace
    Escaped\ Space
    This;Divides;Into;Five;Arguments
    Escaped\;Semicolon
    )
  message("${arg}")
endforeach()
   #+END_SRC
   #+BEGIN_SRC sh
cmake -P script.cmake
   #+END_SRC

** 模块(Modules)
   目录或脚本中的 CMake 语言代码可以使用 [[https://cmake.org/cmake/help/latest/command/include.html#command:include][include()]]命令在包含上下文的范围内加载<module>.cmake 源文件。有关模块的文档，请参阅 [[https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html#manual:cmake-modules(7)][cmake-modules(7)]]。项目源代码树也可以提供它们自己的模块，并在 [[https://cmake.org/cmake/help/latest/variable/CMAKE_MODULE_PATH.html#variable:CMAKE_MODULE_PATH][CMAKE_MODULE_PATH]] 变量中指定它们的位置。

* 语法（Syntax）
** 编码（Encoding）
   建议统一使用 UTF-8 编码。

** 源文件（Source Files）
   CMake 语言源文件由零个或多个[[https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#command-invocations][命令调用(Command Invocations)]] 组成，这些命令调用由换行符和可选的空格和[[https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#comments][注释]] 分开。

   请注意，任何不在“[[https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#command-arguments][命令参数(Command Arguments)]]”或“[[https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#bracket-comment][括号注释(Bracket Comment)]] ”中的行都可以在 [[https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#line-comment][行注释(Line Comment)]] 中结束。

** 命令调用（Command Invocations）
   命令调用是一个名称，后跟括号中由空格分割的参数。例如:
   #+BEGIN_EXAMPLE
command_invocation  ::=  space* identifier space* '(' arguments ')'
   #+END_EXAMPLE


   #+BEGIN_SRC cmake
add_executable(hello world.c)
   #+END_SRC
   命令名不区分大小写。参数中嵌套的不带引号（没被转义）的括号必须平衡。每个命令调用中的“(”或“)”都是字面值。if()命令可用此来聚合条件。例如：
   #+BEGIN_SRC cmake
if(FALSE AND (FALSE OR TRUE)) # evaluates to FALSE
   #+END_SRC

** 命令参数（Command Arguments）
   命令调用（Command Invocations）中有三种类型的参数：

*** 中括号括号参数（Bracket Argument）
	受 Lua 长括号语法启发，中括号参数将内容封闭在相同长度的开闭“中括号”之间：

	#+BEGIN_SRC cmake
message([=[
This is the first line in a bracket argument with bracket length 1.
No \-escape sequences or ${variable} references are evaluated.
This is always one argument even though it contains a ; character.
The text does not end on a closing bracket of length 0 like ]].
It does end in a closing bracket of length 1.
]=])
	#+END_SRC

	开括号是“[”，后跟 0 或更多“=”，然后是“[”。相应的闭括号写为“]”，后跟相同的数量“=”，后跟“]”。括号不能嵌套。可以选择特殊长度的开闭括号来包含其他长度的开闭括号。

	中括号参数内容由开闭括号之间的所有文本组成，但紧接在开括号之后的换行符（如果有的话）将被忽略。不对中括号参数内容（例如转义序列或变量引用）进行求值。中括号参数总是作为一个参数赋给命令调用。

*** 引号参数（Quoted Argument）
	引用参数(Quoted Argument)包含开闭双引号("")中间的内容。 [[https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#escape-sequences][转义序列(Escape Sequences)]]和[[https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#variable-references][变量引用(Variable References)]] 会求值。引用参数总是作为命令调用的一个参数。例如：

	#+BEGIN_SRC cmake
message("This is a quoted argument containing multiple lines.
This is always one argument even though it contains a ; character.
Both \\-escape sequences and ${variable} references are evaluated.
The text does not end on an escaped double-quote like \".
It does end in an unescaped double quote.
")
	#+END_SRC
	如果某行以奇数个反斜杠结尾，最后那个“\”被视为一个续行，它和紧跟在后面的换行符将被忽略。例如：
	#+BEGIN_SRC cmake
message("\
This is the first line of a quoted argument. \
In fact it is the only line but since it is long \
the source code uses line continuation.\
")
	#+END_SRC

*** 非引号参数（Unquoted Argument）
	非引号参数不包含在任何引用语法。它可能不包含任何 =空格,(,),#,“,\= ，除非这些被反斜线转义。转义序列和变量引用都会被求值。

    结果值以列表分成元素的方式进行切分。每个非空元素都作为参数赋给命令调用。因此，一个非引号参数可以作为零个或多个参数传给命令调用。
	#+BEGIN_SRC cmake
foreach(arg
    NoSpace
    Escaped\ Space
    This;Divides;Into;Five;Arguments
    Escaped\;Semicolon
    )
  message("${arg}")
endforeach()
	#+END_SRC

** 转义序列（Escape Sequences）
   转义序列是“\”后跟一个字符。

   “\”后面跟一个非字母数字字符，只是对字面字符进行编码，而不会将其解释为语法。“\t”、“\r”或“\n”分别对制表符，回车符或换行符进行编码。“\;”用在任何变量引用之外可以编码“;”本身，但用在未引用的参数中也是编码“;”，而不是分割参数值。变量引用内部的“\;”用来编码字面量的“;”字符。

** 变量引用（Variable References）
   变量引用的格式为 =${variable_name}= ，并在引用参数(Quoted Argument)或非引用参数(Unquoted Argument)中进行求值。变量引用被变量的值替换，或者如果变量没有被设置，则由空字符串替换。

   变量引用可嵌套，并由内向外进行求值，例如， $ ~{_outer_${inner_variable}_variable}~ 。

   字面变量引用可能由字母数字，/_.+-和转义序列组成。可以使用嵌套引用来对任何名称的变量进行求值。

   [[https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#variables][变量(variables)]]部分记录变量名称的范围以及如何设置它们的值。

   环境变量引用的形式为 ~$ENV{VAR}~ ，并在与普通变量引用一样在上下文中进行求值。

** 注释（Comments）
*** 括号注释（Bracket Comment）
	“#”紧接着一个[[https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#bracket-argument][括号参数（Bracket Argument）]]构成了一个由整个括号框组成的括号注释，例如：
	#+BEGIN_SRC cmake
#[[This is a bracket comment.
It runs until the close bracket.]]
message("First Argument\n" #[[Bracket Comment]] "Second Argument")
	#+END_SRC

*** 行注释（Line Comment）
	“#”不立即跟着一个[[https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#bracket-argument][括号参数(Bracket Argumen)]]形成一个行注释直到行尾，例如：
	#+BEGIN_SRC cmake
# This is a line comment.
message("First Argument\n" # This is a line comment :)
        "Second Argument") # This is a line comment.
	#+END_SRC

* 控制结构（Control Structures）
** 条件块（Conditional Blocks）
   [[https://cmake.org/cmake/help/latest/command/if.html#command:if][if()]]/elseif()/else()/endif() 命令分隔代码块以有条件地执行。

** 循环（Loops）
   [[https://cmake.org/cmake/help/latest/command/foreach.html#command:foreach][foreach()]]/endforeach()和 [[https://cmake.org/cmake/help/latest/command/while.html#command:while][while()]]/endwhile()命令分隔代码块，以循环执行。在这样的块内部，[[https://cmake.org/cmake/help/latest/command/break.html#command:break][break()]]命令可以用来提前终止循环，而[[https://cmake.org/cmake/help/latest/command/continue.html#command:continue][continue()]]命令可以用来立即开始下一次迭代。

** 命令定义（Command Definitions）
	macro()/endmacro()和 [[https://cmake.org/cmake/help/latest/command/function.html#command:function][function()]]/ endfunction()命令将代码块分隔以便稍后调用以作为命令被记录。

* 变量（Variables）
  变量是 CMake 语言的基本存储单元。它们的值始终是字符串类型，尽管有些命令可能会将字符串解释为其他类型的值。[[https://cmake.org/cmake/help/latest/command/set.html#command:set][set()]]和 unset()命令明确设置或取消设置变量，但其他命令也可以修改变量。变量名称区分大小写，几乎可以包含任何文本，但是我们推荐使用只包含字母数字字符加上_和 - 的名称。

  变量具有动态范围。每个变量“set”或“unset”在当前范围内创建一个绑定：

   + 函数作用域（Function Scope）

	 [[https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#command-definitions][函数定义(Command Definitions)]]，由 function()命令创建，当被调用时，在一个新的变量绑定范围中处理记录的命令。通过“set”或“unset”在此范围内绑定变量，只对于当前函数及其内部的任何嵌套调用可见，函数返回后不可见。

   + 目录作用域（Directory Scope）

	 源码树中的每个目录都有自己的变量绑定。在处理目录中的 CMakeLists.txt 文件之前，CMake 会复制父目录中义的所有变量（如果有的话）以初始化当前目录作用域。当用 cmake -P 进行处理时，CMake 脚本将变量绑定在一个“目录”范围内。

     不在函数调用内的“set”或“unset”绑定变量到当前目录范围。

   + 持久缓存（Persistent Cache）

	 CMake 存储一组单独的“缓存”变量或“缓存条目”，它们的值在项目构建树中的多个运行中保持不变。缓存条目具有独立绑定范围，仅由显式修改，例如由 set()和 unset()命令的 CACHE 选项。


   当对变量引用求值时，搜索顺序依次是函数调用堆栈，当前目录范围，缓存条目。如果最后没有找到就取空字符串。

   [[https://cmake.org/cmake/help/latest/manual/cmake-variables.7.html#manual:cmake-variables(7)][cmake-variables(7)]]手册记录了很多变量，它们由 CMake 提供，或者在由项目代码设置。

* 列表（List）
  尽管 CMake 中的所有值都以字符串的形式存储，但是在特定的上下文中可能会将字符串视为列表（例如在 [[https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#unquoted-argument][Unquoted Argument]] 求值期间）。在这样的上下文中，字符串被 =“;”= 分割为列表元素 ， =;= 前面没有数量不等的 =[= 和 =]= ，也没被 =\= 转义。序列 =\;= 不划分字符，而是在产生的元素中被 =;= 取代。

  元素列表通过由“;”将分隔的元素连接一起作为其字符串表示。例如，set（）命令将多个值作为列表存储到目标变量中：
  #+BEGIN_SRC cmake
set(srcs a.c b.c c.c) # sets "srcs" to "a.c;b.c;c.c"
  #+END_SRC

  列表适用于简单用例，如源文件列表，不应用于复杂的数据处理任务。大多数构造列表的命令不会转义列表元素中的“;”的字符，而是展开列表：
  #+BEGIN_SRC cmake
set(x a "b;c") # sets "x" to "a;b;c", not "a;b\;c"
  #+END_SRC
