# -*- coding:utf-8; -*-
#+TITLE: language guide proto3
#+author:刘尚亮
#+email:phenix3443@gmail.com


本文翻译自翻译自 [[https://developers.google.com/protocol-buffers/docs/proto3][Language Guide (proto3)]]

* 概述

  该指南描述了如何使用 protocol buffer 语言构造 protocol buffer 数据，包括 =.proto= 文件语法和如何从 =.proto= 文件生成数据访问类。它覆盖了 protocol buffers 语言的 proto3 版本；有关 proto2 语法，参看 [[https://developers.google.com/protocol-buffers/docs/proto][Proto2 Language Guide]] 。

  这是参考指南–有关使用本文档中描述的许多功能的分步示例，请参阅所选语言的教程（目前仅适用于 proto2；更多的 proto3 文档即将发布）。

* Defining A Message Type（定义消息类型）

  首先，让我们看一个非常简单的示例。假设要定义一个搜索请求消息格式，其中每个搜索请求都有一个查询字符串，感兴趣的特定结果页面以及每页结果数量。使用以下 =.proto=  文件定义消息格式：
  #+BEGIN_SRC protobuf
message SearchRequest {
    string query = 1;
    int32 page_number = 2;
    int32 result_per_page = 3;
}
  #+END_SRC

  + 文件的第一行指定使用的是 proto3 语法：如果不这样做，则协议缓冲区编译器将假定使用的是 proto2。这必须是文件的第一个非空，非注释行。
  + SearchRequest 消息定义指定了三个字段（名/值对），分别代表该类型消息中想要包含的数据。每个字段都有名字和类型。

** Specifying Field Types（指定字段类型）

   上面的例子中，所有的字段都是[[https://developers.google.com/protocol-buffers/docs/proto#scalar][标量类型]]：两个整数（ ~page_numer~ 和 ~result_per_page~ ）和一个字符串（ =query= ）。然而也可以指定复合类型字段，包括[[https://developers.google.com/protocol-buffers/docs/proto#enum][枚举]]和其他消息类型。

** Assigning Tags（分配标签）
   如你所见，消息中每个字段都有唯一的数字标签。这些数字用于在消息[[https://developers.google.com/protocol-buffers/docs/encoding][二进制格式]]中识别字段，一旦消息类型开始使用，就不应该更改这些数字。注意，值为 1-15 的标签使用一个字节进行编码，包括识别数字和字段类型（可以 [[https://developers.google.com/protocol-buffers/docs/encoding#structure][Protocol Buffer Encoding]] 中了解更多信息）。16-2047 的标签使用两个字节编码。所以应该为字段中频繁出现的消息元素保留标 1-15 标签。切记为将来可能添加的频繁出现的元素保留一些空间。

   可指定的最小数字是 1，最大是 2^29-1，或者 536,870,911。不能使用 19000 到 19999 ( =FieldDescriptor::kFirstReservedNumber= 到 =FieldDescriptor::kLastReservedNumber= )，因为它们为 Protocol Buffers 实现保留。如果在 =.proto= 中使用这些保留数字，protocol buffer 编译器将会警告。类似的，不能使用任何之前 [[https://developers.google.com/protocol-buffers/docs/proto3#reserved][保留]] 的标签。

** Specifying Field Rules(指定字段规则)

   可指定的消息字段类型如下：

   + singular：格式正确的消息中可以包含零个或一个此字段（但不能超过一个）。这是 proto3 语法的默认字段规则。
   + repeated：格式正确的消息中该字段可以重复任意次数（包括 0 次）。重复值的顺序将会保留。

   在 proto3 中，标量数字类型的重复字段默认情况下使用 =packed= 编码。

   在 [[https://developers.google.com/protocol-buffers/docs/encoding#structure][Protocol Buffer Encoding]] 中了解更多 =packed= 编码的信息。

** Adding More Message Types（添加更多消息类型）
   可以在 =.proto= 文件中定义多种消息类型。这有利于定义个多个相关的消息---举例来说，可在同样的 =.proto= 中定义响应 SearchRequest 的消息格式：

   #+BEGIN_SRC protobuf
message SearchRequest {
  required string query = 1;
  optional int32 page_number = 2;
  optional int32 result_per_page = 3;
}

message SearchResponse {
 ...
}
   #+END_SRC

** Adding Comments（添加注释）
   使用 C/C++ 风格的 =//= 和 =/**/= 语法在 =.proto= 文件中添加注释。

   #+BEGIN_SRC protobuf
/* SearchRequest represents a search query, with pagination options to
 * indicate which results to include in the response. */

message SearchRequest {
  required string query = 1;
  optional int32 page_number = 2;// Which page number do we want?
  optional int32 result_per_page = 3;// Number of results to return per page.
}
   #+END_SRC

** Reserved Fields（保留字段）
   如果通过删除或注释整个字段来更新消息类型，将来用户自己更新类型时可以复用（曾经使用的）标签号码。之后如果他们加载同一 =.proto= 文件的历史版本的数据可能会引发严重问题，包括数据损坏，隐藏 bug 等。确保不发生此情况的方法是将删除字段的标签（以及可能导致 JSON 序列化导致出问题的名字）指定为保留。如果未来用户尝试使用这些字段标识符，protocol buffer 编译器将会给出警告。

   #+BEGIN_SRC protobuf
message Foo {
  reserved 2, 15, 9 to 11;
  reserved "foo", "bar";
}
   #+END_SRC

   注意，在同一个 reserved 声明中不能混用名字在和标签号码。

** What's Generated From Your =.proto= ?（ =.proto=  文件中生成了产物）
   proto buffer 编译器根据 =.proto=  文件和所选语言生成代码，使用文件中描述的消息类型将会用到这些代码，包括获取和设置字段值、序列化消息到输出流、从输入流解析消息。
   + C++，编译器为每个 =.proto=  生成 =.h= 和 =.cc= 文件， =.proto= 文件中描述的每个消息类型都会对应一个类。
   + Java，编译器生成 =.java= 文件，每个消息类型对应一个类，还会生成一个 =builder= 类来创建消息类的实例。
   + Python 有点不同，Python 编译器为 =.proto= 中的每个消息会产生一个包含静态描述符的模块，之后在运行时该模块使用元类创建必要的 Python 数据访问类。
   + Go，编译器为文件中的每个消息产生 =.pb.go= 文件。
   + Ruby，编译器生成一个.rb 文件，该文件包含与消息类型对应的 Ruby 模块。
   + Objective-C，编译器从每个 =.proto= 生成 pbobjc.h 和 pbobjc.m 文件，并为文件中描述的每种消息类型提供一个类。
   + C＃，编译器从每个 =.proto= 生成一个 =.cs= 文件，并为文件中描述的每种消息类型提供一个类。
   + Dart，编译器会生成一个 =.pb.dart= 文件，其中包含文件中每种消息类型的类。

   按照所选语言的教程可以查找更多关于如何使用语言 API 的信息。查看相关的 API 参考了解更多 API 的细节。

* Scalar Value Types（标量值类型）

  标量消息字段可以是下列类型之一，下表显示了 =.proto=  文件中指定的类型，以及自动生成的类中对应的类型：

  | =.proto=  Type | 	Notes  | 	C++ Type | 	Java Type | 	Python Type | 	Go Type |
  |                | <10>       |              |               |                 |             |
  | double         |            | double       | double        | float           | *float64    |
  | float          |            | float        | float         | float           | *float32    |
  | int32          | Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. | int32        | int           | int             | *int32      |
  | int64          | Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. | int64        | long          | int/long        | *int64      |
  | uint32         | Uses variable-length encoding. | uint32       | int           | int/long        | *uint32     |
  | uint64         | Uses variable-length encoding. | uint64       | long          | int/long        | *uint64     |
  | sint32         | Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. | int32        | int           | int             | *int32      |
  | sint64         | Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. | int64        | long          | int/long        | *int64      |
  | fixed32        | Always four bytes. More efficient than uint32 if values are often greater than 228. | uint32       | int           | int             | *uint32     |
  | fixed64        | Always eight bytes. More efficient than uint64 if values are often greater than 256. | uint64       | long          | int/long        | *uint64     |
  | sfixed32       | Always four bytes. | int32        | int           | int             | *int32      |
  | sfixed64       | Always eight bytes. | int64        | long          | int/long        | *int64      |
  | bool           |            | bool         | boolean       | bool            | *bool       |
  | string         | A string must always contain UTF-8 encoded or 7-bit ASCII text. | string       | String        | str/unicode     | *string     |
  | bytes          | May contain any arbitrary sequence of bytes. | string       | ByteString    | str             | []byte      |

  在 Protocol Buffer Encoding 中可以了解更多关于序列化消息时如何编码这些类型。

* Default Values（默认值）
  解析消息时，如果编码的消息不包含特定的单数元素，则已解析对象中的相应字段将设置为该字段的默认值。这些默认值与类型有关：
  + 对于 strings，默认值为空字符串。
  + 对于 bytese，默认值为空字节。
  + 对于 bools，默认值为 false。
  + 对于数字类型，默认值为零。
  + 对于枚举，默认值为第一个定义的枚举值，必须为 0。
  + 对于消息字段，未设置该字段。它的确切值取决于语言。有关详细信息，请参见[[rmail:https://developers.google.com/protocol-buffers/docs/reference/overview][生成的代码指南]]。

  重复字段的默认值为空（通常为相应语言的空列表）。

  请注意，对于标量消息字段，解析消息后，无法判断是字段是设置为默认值（例如，是否将布尔值设置为 false）还是根本没有设置：应该在定义消息类型时要注意。例如，如果不希望 bool 设置为 false 产生的行为与默认发生的行为相同，就不要使用布尔值。还要注意，如果将标量消息字段设置为其默认值，则该值将不会被序列化。

  有关默认值在生成的代码中如何工作的更多详细信息，请参见所选语言的[[https://developers.google.com/protocol-buffers/docs/reference/overview][生成的代码指南]]。

* Enumerations（枚举）
  定义消息类型时，可能希望其字段取值仅限于预定义列表中。例如，如果想给每个 SearchRequest 添加一个 corpus 字段，corpus 可以是 =UNIVERSAL, WEB, IMAGES, LOCAL, NEWS, PRODUCTS or VIDEO= 。只需在消息定义中添加一个枚举即可。枚举类型的字段只能取值为指定常量集合中的一个（如果尝试提供其他值，解析器将会认为它是一个未知字段）。

  下面示例中，添加了名为 Corpus 的枚举，其中包含所有可能的值，还添加一个类型为 Corpus 的字段。

  #+BEGIN_SRC protobuf
message SearchRequest {
  required string query = 1;
  optional int32 page_number = 2;
  optional int32 result_per_page = 3 [default = 10];
  enum Corpus {
    UNIVERSAL = 0;
    WEB = 1;
    IMAGES = 2;
    LOCAL = 3;
    NEWS = 4;
    PRODUCTS = 5;
    VIDEO = 6;
  }
  optional Corpus corpus = 4 [default = UNIVERSAL];
}
  #+END_SRC
  如您所见，Corpus 枚举的第一个常量映射为零：每个枚举定义必须包含一个映射为零的常量作为其第一个元素。这是因为：
  + 必须有一个零值，以便我们可以使用 0 作为数字默认值。
  + 零值必须是第一个元素，以便与 proto2 语义兼容，其中第一个枚举值始终是默认值。

  可以通过将相同的值赋给不同的枚举常量来定义别名，这么做需要将 =allow_alias= 选项设置为 true，否则 protocol 编译器在发现别名的时候将会产生错误信息。

  #+BEGIN_SRC protobuf
enum EnumAllowingAlias {
  option allow_alias = true;
  UNKNOWN = 0;
  STARTED = 1;
  RUNNING = 1;
}
enum EnumNotAllowingAlias {
  UNKNOWN = 0;
  STARTED = 1;
  // RUNNING = 1;  // Uncommenting this line will cause a compile error inside Google and a warning message outside.
}
  #+END_SRC

  枚举常量必须在 32bit 整数范围之内。因为枚举变量使用了高级的 varint 编码，负数效率不高，因而不推荐使用。可以在消息定义中定义枚举，如上面的列子，也可以定义在外面，这些枚举可以被 =.proto= 文件中所有消息定义使用。使用语法 =_MessageType_._EnumType_= ，可以将一条消息中声明的枚举类型作为其他消息字段的类型。

  编译包含枚举的 =.proto= 文件时，Java 和 C++ 生成的代码中包含对应的 enum 类型，Python 中生成特殊的 EnumDescriptor 类，用于在运行时产生的类中使用整数值创建一组符号常量。

  反序列化期间，无法识别的枚举值将保留在消息中，尽管在反序列化消息时如何表示该值取决于语言。在支持超出指定符号范围的值的开放式枚举类型的语言（例如 C ++和 Go）中，未知的枚举值仅以其基础整数表示形式存储。在诸如 Java 之类的具有封闭枚举类型的语言中，枚举被用于表示无法识别的值，可以使用特殊的访问器访问底层整数。无论哪种情况，如果消息被序列化，则无法识别的值仍将与消息一起序列化。

  参阅所选语言的[[https://developers.google.com/protocol-buffers/docs/reference/overview][生成代码指南]]，了解应用中如何使用消息常量.

** Reserved Values（保留值）
   如果通过完全删除枚举条目或将其注释掉来更新枚举类型，则将来的用户在对类型进行更新时可以重用这些被删除或注释数值。如果他们以后加载同一 =.proto= 的旧版本的数据，这可能会导致严重的问题，包括数据损坏，隐私错误等。确保不会发生这种情况的一种方法是指定保留已删除条目的数值（也可能包括名称，名称也可能导致 JSON 序列化问题）。如果将来有任何用户尝试使用这些标识符，则协议缓冲区编译器会产生告警。可以使用 max 关键字指定保留的数值范围达到最大可能值。
   #+BEGIN_SRC protobuf
enum Foo {
  reserved 2, 15, 9 to 11, 40 to max;
  reserved "FOO", "BAR";
}
   #+END_SRC

   请注意，不能在同一保留语句中混合使用字段名和数字值。

* Using Other Message Types（使用其他消息作为类型）
  可以使用其他消息类型作为字段类型。例如，如果想在每个 SearchResponse 消息中包含 Result 消息，可以在同一个 =.proto=  文件中定义一个 Result 消息，然后在 SearchResponse 中指定一个类型为 Result 的字段。

  #+BEGIN_SRC protobuf
message SearchResponse {
  repeated Result result = 1;
}

message Result {
  required string url = 1;
  optional string title = 2;
  repeated string snippets = 3;
}
  #+END_SRC

** Importing Definitions（导入定义）

   上面的例子中，Result 消息类型与 SearchResponse 定义在同一个文件中，如果想要使用定义在其他 =.proto= 文件中的消息类型该怎么办？

   通过导入其他 =.proto=  文件可以使用其中的定义。导入其他 =.proto=  文件定义需要在当前文件顶部添加 =import= 声明：

   #+BEGIN_SRC protobuf
import "myproject/other_protos.proto";
   #+END_SRC

   默认情况下只能使用直接导入的 =.proto= 文件中的定义。然而，有时，可能需要将 =.proto= 文件移动到新位置，此时就需要更改所有调用该文件的位置，现在可以在原位置放一个虚拟的 =.proto= 文件，使用 =import public= 概念将所有的导入转发到新位置。任何导入包含 =import public= 声明的 proto 文件都可以跟踪这种 =import pubulic= 依赖关系。

   #+BEGIN_SRC protobuf
// new.proto
// All definitions are moved here
   #+END_SRC

   #+BEGIN_SRC protobuf
// old.proto
// This is the proto that all clients are importing.
import public "new.proto";
import "other.proto";
   #+END_SRC

   #+BEGIN_SRC protobuf
// client.proto
import "old.proto";
// You use definitions from old.proto  and new.proto , but not other.proto
   #+END_SRC

   protocol 编译器在命令行标志 =-I/--proto_path= 指定的目录集合中查找被导入的文件。如果未指定该标志，就在调用编译器的目录查找。一般来说，应该设置将 =--proto_path= 标志指定为项目所在根目录，为所有导入使用完全限定的名字。

** Using proto2 Message Types（使用 proto2 消息类型）

   proto2 和 proto3 中的消息类型可以相互导入。然而，proto2 的枚举不能用在 proto3 语法中。

* Nested Types(嵌套类型)

  消息类型可以嵌套定义和使用，例如下面示例中， Result 消息定义在 SearchResponse 消息里面：

  #+BEGIN_SRC protobuf
message SearchResponse {
  message Result {
    required string url = 1;
    optional string title = 2;
    repeated string snippets = 3;
  }
  repeated Result result = 1;
}
  #+END_SRC

  如果想要在该消息类型的父类型外面使用该消息类型，可以使用 =_Parent_._Type_= 进行引用：
  #+BEGIN_SRC protobuf
message SomeOtherMessage {
  optional SearchResponse.Result result = 1;
}
  #+END_SRC

  消息可以嵌套任意深度：

  #+BEGIN_SRC protobuf
message Outer {                  // Level 0
  message MiddleAA {  // Level 1
    message Inner {   // Level 2
      required int64 ival = 1;
      optional bool  booly = 2;
    }
  }
  message MiddleBB {  // Level 1
    message Inner {   // Level 2
      required int32 ival = 1;
      optional bool  booly = 2;
    }
  }
}
  #+END_SRC

* Updating A Message Type（更新消息类型）

  如果现有消息类型不能满足需求（例如，消息格式需要增加一个额外字段），但仍需使用旧格式创建的代码，别担心！更新消息类型很简单，而且不会破坏现有代码。只需要记住以下规则：

  + 不要修改任何现有字段的编号。

  + 如果添加新字段，仍可以使用新生成的代码来解析使用“旧”消息格式序列化的消息。应该记住这些新元素的默认值，以便新代码可以与旧代码生成的消息正确交互。同样，由新代码创建的消息可以由旧代码解析：旧的二进制文件在解析时只会忽略新字段。有关详细信息，请参见“未知字段”部分。

  + 只要在更新的消息类型中不再使用字段编号，就可以删除该字段。可能想要重命名该字段，添加前缀“ OBSOLETE_”，或者保留该字段编号，以使 =.proto= 的将来用户不会意外重用该编号。

  + int32, uint32, int64, uint64, and bool 是全部兼容的---这意味着这些类型进行转换不会破坏向前或向后兼容性。如果解析后得到的数字不符合相应的类型，可能会遇到类似 C++ 中数字被 cast 转换的效果（比如，如果 64 位数字被当作 int32 读，将被截断位 32 位）。

  + sint32 and sint64 彼此兼容，但不与其他整数类型兼容。

  + 只要字节是有效的 utf-8，string 和 bytes 就是兼容的。

  + 如果字节包含消息的编码版本，嵌入的消息与 bytes 兼容。

  + fixed32 与 sfixed32 彼此兼容，fixed64 和 sfixed64 彼此兼容。

  + 对于 string，bytes 和消息字段，optional 与 repeated 兼容。给定 repeated 字段的序列化数据作为输入，如果期望该字段是 optional，则如果它是原始类型字段，则将采用最后一个输入值；如果是消息类型字段，则将合并所有输入元素。请注意，这对于数字类型（包括布尔值和枚举）通常并不安全。repeated 数字类型字段可以以 [[https://developers.google.com/protocol-buffers/docs/encoding#packed][packed]] 格式序列化，当期望使用可选字段时，该格式将无法正确解析。

  + enum 和 int32, uint32, int64, and uint64 兼容（如果值不合适将会截断），但是请注意，反序列化消息时客户端代码可能以不同方式处理它们。例如，无法识别的 proto3 枚举类型将保留在消息中，但是在反序列化消息时如何表示它取决于语言。 Int 字段始终只是保留其值。

  + 将单个值更改为 *新* 的 oneof 的成员是安全且二进制兼容的。如果确定代码不会一次设置多个字段，那么将多个字段移动到 *新* oneof 中可能是安全的。将任何字段移至已有 oneof 都不安全。

* Unknown Field（未知字段）
  未知字段是格式正确的协议缓冲区序列化数据，表示解析器无法识别的字段。例如，当新的二进制程序发送旧的二进制文件产生的数据时，这些新字段将成为旧二进制文件中的未知字段。

  最初，proto3 消息在解析过程中总是丢弃未知字段，但是在版本 3.5 中，我们重新引入了保留未知字段以匹配 proto2 行为的功能。在版本 3.5 和更高版本中，未知字段将在解析期间保留并包含在序列化输出中。

* Any
  Any 消息类型可以将消息用作嵌入式类型，而无需定义它们的 =.proto= 。Any 包含任意消息序列化后的字节序以及 URL，该 URL 代表该消息的全局唯一标识符并负责解析到该消息。要使用 Any 类型，需要导入 =google/protobuf/any.proto= 。
  #+BEGIN_SRC protobuf
import "google/protobuf/any.proto";

message ErrorStatus {
  string message = 1;
  repeated google.protobuf.Any details = 2;
}

  #+END_SRC

  给定消息类型的默认类型 URL 为 =type.googleapis.com/_packagename_._messagename_= 。

  不同语言实现将支持运行时库，以帮助程序以类型安全的方式打包和解压缩 Any 值，例如，在 Java 中，Any 类型将具有特殊的 =pack()= 和 =unpack()= 访问器，而在 C++ 中则具有 =PackFrom()= 和 =UnpackTo()= 方法：

  当前，正在开发用于 Any 类型的运行时库。

  如果已经熟悉 proto2 语法，则 Any 可以保存任意 proto3 消息，类似于可以允许扩展的 proto2 消息。

* Oneof

  如果消息有很多字段，但同一时间最多设置一个字段，可以使用 oneof 特性以节省内存。

  Oneof 字段与字段不同的是所有字段共享 oneof 内存，同时最多可设置一个字段。设置 oneof 的任何成员都会自动清除其他成员。可以使用使用特殊的 =case()= 或 =whichOneof()= 方法检查设置了哪个 oneof 值，具体取决于使用的语言。

** Using Oneof（使用 oneof）

   使用 =oneof= 关键字，后跟变量名，本例中变量名是 =test_oneof= ：

   #+BEGIN_SRC protobuf
 message SampleMessage {
   oneof test_oneof {
      string name = 4;
      SubMessage sub_message = 9;
   }
 }
   #+END_SRC

   然后在 oneof 定义中添加字段。可以添加任何类型的字段，但是不能使用 =map= 和 =repeated= 字段。

   生成的代码中，oneof 字段具有于普通字段一样的 getters 和 setters。可以使用特殊的方法检查设置 oneof 中的哪个值。可以参考所选语言的 oneof API。

** Oneof Features（oneof 特性）

   + 设置 oneof 字段会自动清除该 oneof 的其他成员。所以如果设置多个 oneof 字段，只有最后设置的字段会有值。

	 #+BEGIN_SRC C++
 SampleMessage message;
 message.set_name("name");
 CHECK(message.has_name());
 message.mutable_sub_message();   // Will clear name field.
 CHECK(!message.has_name());
	 #+END_SRC
   + 如果解析器遇到 oneof 的多个成员，只有最后成员会用于解析后的消息中。

   + oneof 不能是 =repeated= 。

   + 反射 API 可用于 oneof 字段。

   + 如果将 oneof 字段设置为默认值（例如将 int32 oneof 字段设置为 0），则该 oneof 字段将被设置为大写，并且该值将被序列化。

   + 如果使用 C++，确保代码不会导致内存崩溃。下面的代码将会崩溃，因为 sub_message 由于调用 =set_name()= 方法已经被删除。

	 #+BEGIN_SRC C++
SampleMessage message;
SubMessage* sub_message = message.mutable_sub_message();
message.set_name("name");      // Will delete sub_message
sub_message->set_...            // Crashes here
	 #+END_SRC

   + 还是 C++，如果 =Swap()= 两个包含 oneof 的消息，每个消息都会最终使用另外一个的 oneof，下面的例子中，msg1 将会有 sub_message，而 msg2 将会有 name。

	 #+BEGIN_SRC C++
SampleMessage msg1;
msg1.set_name("name");
SampleMessage msg2;
msg2.mutable_sub_message();
msg1.swap(&msg2);
CHECK(msg1.has_sub_message());
CHECK(msg2.has_name());
	 #+END_SRC

** Backwards-compatibility issues（向后兼容问题）

   添加或删除 oneof 字段时候要小心。如果 oneof 的检查结果返回 None 或 NOT_SET，可能表示没有设置或已经被设置为不同字段的 oneof。没有办法区分着两者，因为没法知道一个未知字段是否是 oneof 的成员。

   Tag Reuse Issues（标签重用问题）
   + 将字段移入或移出 oneof：在对消息进行序列化和解析后，可能会丢失一些信息（某些字段将被清除）。但是，可以安全地将单个字段移动到新字段中，如果知道只设置了一个字段，则可以移动多个字段。
   + 删除 oneof 字段，然后又添加回去：消息序列化和解析之后可能会清除当前设置的 oneof 字段。
   + 分割或合并 oneof：和移动 optional 字段有同样问题。

* Maps

  如果想在数据定义中创建一个关联映射 map，protocol buffers 提供了一个方便快捷的语法：

  #+BEGIN_SRC C++
map<key_type, value_type> map_field = N;
  #+END_SRC

  =key_type= 可以是任何数字和字符类型（除了浮点类型和字节类型外的标量类型）。注意，枚举不能作为 =key_type= ， =value_type= 可以是除另一个 map 外的任何类型。

  例如，如果想创建一个 =project= 的映射，每个 =Project= 消息与一个字符串 key 关联，定义如下：

  #+BEGIN_SRC C++
map<string, Project> projects = 3;
  #+END_SRC

   + map 不可以是 =repeated= 。
   + map 键值对顺序是未定义的。
   + =.proto=  生成文本格式时，map 按照 key 排序。数字键按数字大小排序。
   + 如果有重复的 map key，当从 wire format 解析或合并时，将使用最后一个；当从文本格式解析时将会失败。
   + 如果为映射字段提供键但没有值，则序列化字段时的行为取决于语言。在 C++，Java 和 Python 中，类型的默认值是序列化的，而在其他语言中，值不会序列化。

   生成的地图 API 当前可用于所有 proto3 支持的语言。可以在相关 API 参考中找到有关所选语言的 map API 的更多信息。

** Backwards compatibility（向后兼容性）
   map 语法相当于下面的代码，所以不支持 map 的实现也可以处理数据：

   #+BEGIN_SRC protobuf
 message MapFieldEntry {
   key_type key = 1;
   value_type value = 2;
 }
repeated MapFieldEntry map_field = N;
   #+END_SRC

   任何支持 map 的 protocol buffer 实现都必须产生并接受上述定义可以接受的数据。

* Packages（包）

  在 =.proto= 文件中添加可选的 =package= 说明符，以防止协议消息类型之间的命名冲突。

  #+BEGIN_SRC protobuf
package foo.bar;
message Open { ... }
  #+END_SRC

  然后，当定义字段时，消息类型可以使用包识别符：

  #+BEGIN_SRC protobuf
message Foo {
  ...
  required foo.bar.Open open = 1;
  ...
}
  #+END_SRC

  包识别符如何影响生成的代码取决于所选的语言：

  + C++中，生成的类封装在 C++ 命名空间中。例如，open 将会处于 =foo::bar= 命名空间。
  + Java 中，package 被当作 Java package，除非在 =.proto= 文件中显示提供选项 =java_package= 。
  + Python 中，忽略 package 指令，因为 Python 模块通过它们在文件系统中的位置进行组织。
  + 在 Go 中，包指令将被忽略，并且生成的 =.pb.go= 文件位于以相应的 =go_proto_library= 规则命名的包中。
  + 在 Ruby 中，生成的类被包装在嵌套的 Ruby 名称空间中，转换为所需的 Ruby 大写样式（首字母大写；如果首字符不是字母，则以 PB_开头）。例如，Open 将位于命名空间 =Foo::Bar= 中。
  + 在 C＃中，除非转换为 =.proto= 文件中明确提供选项 =csharp_namespace= ，否则在转换为 PascalCase 之后，package 将用作命名空间。例如，Open 将位于命名空间 Foo.Bar 中。

** Packages and Name Resolution（包和名字解析）
   protocol buffer 语言中的类型名称解析与 C++ 类似：首先搜索最内层作用域，然后是次内层作用域，以此类推。每个包都当作其父包的内层。前缀 =‘.’= （例如 =.foo.bar.Baz= ）表示从最外面的作用域开始。

   protocol buffer 编译器通过分析导入的 =.proto=  文件解析所有的类型名字。各语言的代码生成器知道如何引用每种类型，即使它们有不同的作用域规则。

* Defining Services（定义服务）

  如果要将消息类型与 RPC（远程过程调用）系统一起使用，则可以在 =.proto= 文件中定义 RPC 服务接口，并且 protocol buffer 编译器将以选择的语言生成服务接口代码和 stub。例如，如果要定义接收 SearchRequest 并返回 SearchResponse 的 RPC 服务，则可以在 =.proto= 文件中对其进行如下定义：

  #+BEGIN_SRC protobuf
service SearchService {
  rpc Search (SearchRequest) returns (SearchResponse);
}
  #+END_SRC

  与 protocol buffer 一起使用的最简单的 RPC 系统是 gRPC：由 Google 开发的与语言和平台无关的开源 RPC 系统。 gRPC 与 protocol buffers 配合使用特别好，并允许使用特殊的 protocol buffers 编译器插件直接从 =.proto= 文件生成相关的 RPC 代码。

  除 gRPC 外，还有许多正在进行的第三方项目正在为 protocol buffers 开发 RPC 实现。

  还有许多正在进行的第三方项目正在为协议缓冲区开发 RPC 实现。有关我们知道的项目的链接列表，请参见第三方加载项 Wiki 页面。

* Json Mapping
  Proto3 支持 JSON 的规范编码，从而使在系统之间共享数据更加容易。下表按类型对编码进行了描述。

  如果 JSON 编码的数据中缺少某个值，或者该值为 null，则在解析为协议缓冲区时，它将被解释为适当的默认值。如果字段在协议缓冲区中具有默认值，则默认情况下会在 JSON 编码数据中将其省略以节省空间。实现可以提供选项，以在 JSON 编码的输出中产生具有默认值的字段。

** JSON options(JSON 选项)
   proto3 JSON 实现可以提供以下选项：
   + 产生具有默认值的字段：默认情况下，proto3 JSON 输出中省略具有默认值的字段。实现可以提供一个选项，以使用其默认值覆盖此行为和输出字段。
   + 忽略未知字段：默认情况下，Proto3 JSON 解析器应拒绝未知字段，但可以提供在解析时忽略未知字段的选项。
   + 使用 proto 字段名称代替 lowerCamelCase 名称：默认情况下，proto3 JSON 打印机应将字段名称转换为 lowerCamelCase 并将其用作 JSON 名称。实现可以提供一个选项，改为使用原型字段名称作为 JSON 名称。Proto3 JSON 解析器必须接受转换后的 lowerCamelCase 名称和原型字段名称。
   + 将枚举值作为整数而不是字符串发送：枚举值的名称在 JSON 输出中默认使用。可以提供一个选项来代替使用枚举值的数字值。

* Options（选项）
  =.proto= 文件中各声明可以使用很多选项进行注释。选项不会改变声明的整体含义，但是影响选项在特定上下文中的处理方式。可用选项的完整列表定义在 =google/protobuf/descriptor.proto= 。

  一些选项是文件级选项，这意味着它们应在顶级范围内编写，而不是在任何消息，枚举或服务定义内。一些选项是消息级别的选项，这意味着它们应该写在消息定义中。一些选项是字段级选项，这意味着它们应在字段定义中编写。选项也可以写在枚举类型，枚举值，字段，服务类型和服务方法中；但是，目前没有针对这些功能的有用选项。

  以下是一些最常用的选项：
  + =java_package=（文件选项）：用于生成 Java 类的包。如果 =.proto=  文件中未显式指定 =java_package= 选项，默认使用 proto =package=（在 =.proto=  文件中使用 “package” 关键字指定）。但是，proto 包通常不能作为 Java 包，因为 proto 包不应以反向域名开始，如果不生成 Java 代码，该选型无效。
    #+BEGIN_SRC protobuf
option java_package = "com.example.foo";
    #+END_SRC
  + =java_outer_classname=（文件选项）：要生成的最外层 Java 类的名字（也是文件名）。如果 =.proto= 文件没有显式指定 =java_outer_classname= ，将会通过转化 =.proto= 文件名为驼峰式来构建类名（ =foo_bar.proto= 将变为 =FooBar.java= ）。如果不生成 Java 代码，该选项无效。
	#+BEGIN_SRC protobuf
option java_outer_classname = "Ponycopter";
	#+END_SRC
  + =optimize_for=（文件选项）：可设置为 =SPEED, CODE_SIZE, or LITE_RUNTIME= 。通过以下方式影响 C++ 和 java 代码生成（可能还有第三方生成器）：
	+ SPEED（默认）：protocol buffer 编译器将为消息类型的序列化，解析，和其他常见操作产生代码。代码经过高度优化。
	+ CODE_SIZE：protocol buffer 编译器将会产生最小类，将基于反射的共享代码实现序列化，分析和其他操作。因而生成的代码将会比 SPEED 小很多，但操作会更慢。类仍将实现与 SPEED 模式同样的公共 API。此模式在包含大量 =.proto= 文件且不需要所有文件都快速达到要求的应用程序中最有用。
	+ LITE_RUNTIME：protocol buffer 编译将生成仅依赖‘lite’运行时库的类（libprotobuf-lite 而非 libprotobuf）。精简版运行时比完整库要小得多（大约小一个数量级），但省略了一些特性，比如描述符和反射。这对于运行在受限平台，比如移动手机上面的应用很有用。编译器仍会生成类似 SPEED 模式中所有方法的快速实现。生成的类仅实现各语言的 MessageLite 接口，该接口提供完整消息接口的子集。

	  #+BEGIN_SRC protobuf
option optimize_for = CODE_SIZE;
	  #+END_SRC

  + =cc_enable_arenas= （文件选项）：为 C++ 生成的代码启用 [[https://developers.google.com/protocol-buffers/docs/reference/arenas][arena allocation]] 。
  + =objc_class_prefix= （文件选项）：设置 Objective-C 类的前缀，该前缀附加到所有 Objective-C 生成的类和此 =.proto= 枚举。没有默认值。您应该使用 Apple 推荐的 3-5 个大写字符之间的前缀。请注意，Apple 保留所有 2 个字母前缀。
  + =deprecated=（文件选项）：如果设置为 true，表明该字段已被废弃，新代码不应该使用。大多数语言中没有实际效果。Java 中，这将变为 =@Deprecated= 注释。将来，其他特定语言的代码生成器可能会在字段访问器生成弃用注释，这反过来会在编译使用该字段的代码时触发一个警告。如果没人使用该字段，并想阻止新用户使用它，考虑使用 =reserved statement= 替换该字段声明。

	#+BEGIN_SRC protobuf
optional int32 old_field = 6 [deprecated=true];
	#+END_SRC

** Custom Options（定制选项）

   Protocol Buffers 设置允许定义和使用自己的选项。注意，这是大多数人不会用到的一个高级特性。如果您确实需要创建自己的选项，请参阅[[https://developers.google.com/protocol-buffers/docs/proto#customoptions][《Proto2语言指南》]]以了解详细信息。请注意，创建自定义选项会使用 [[https://developers.google.com/protocol-buffers/docs/proto#extensions][扩展]] ，扩展仅适用于 proto3 中的自定义选项。

* Generating Your Classes（生成自己的类）
  为了生成 Java, Python, C++, Go, Ruby, Objective-C, 或 C# 代码，以使用定义在 =.proto= 文件中定义的消息类型，需要运行 protocol buffer 编译器编译 =.proto= 文件。如果没有安装编译器，[[https://developers.google.com/protocol-buffers/docs/downloads][下载安装包]]，按照 READEME 中的说明进行安装。对于 Go，您还需要为编译器安装一个特殊的代码生成器插件：您可以在 GitHub 上的 [[https://github.com/golang/protobuf/][golang/protobuf]] 仓库中找到此代码和安装说明。

  Protocol 编译器使用如下：
  #+BEGIN_SRC sh
protoc --proto_path=IMPORT_PATH --cpp_out=DST_DIR --java_out=DST_DIR --python_out=DST_DIR path/to/file =.proto=
  #+END_SRC

  + =IMPORT_PATH= 指定解析 import 执行时查找 =.proto=  文件的目录。如果省略，使用当前目录。可以通过多次使用 =--proto_path=  选项来指定多个导入目录；将会按序查找它们。 ~-I=IMPORT_PATH~ 可作为 =--proto_poath= 的简写形式。
  + 可以提供一个或更多输出指令：
	+ =--cpp_out= 在 DST_DIR 生成 C++ 代码。参阅 [[https://developers.google.com/protocol-buffers/docs/reference/cpp-generated][C++ generated code reference]] 了解更多。
	+ =--java_out= 在 DST_DIR 生成 java 代码。参阅 [[https://developers.google.com/protocol-buffers/docs/reference/java-generated][Java generated code reference]] 了解更多。
	+ =--python_out= 在 DST_DIR 生成 python 代码。参阅 [[https://developers.google.com/protocol-buffers/docs/reference/python-generated][Python generated code reference]] 了解更多。为进一步方便起见，如果 DST_DIR 以 =.zip= 或 =.jar= 结尾，则编译器会将输出写入给定名称的单个 ZIP 格式存档文件。根据 Java JAR 规范的要求，还将为 =.jar= 输出提供清单文件。注意，如果输出存档已经存在，它将被覆盖；编译器不够智能，无法将文件添加到现有存档中。
    + =--go_out= 在 DST_DIR 中生成 Go 代码。有关更多信息，请参见[[https://developers.google.com/protocol-buffers/docs/reference/go-generated][Go生成的代码参考]]。
    + =--ruby_out= 在 DST_DIR 中生成 Ruby 代码。 Ruby 生成的代码参考即将推出！
    + =--objc_out= 在 DST_DIR 中生成 Objective-C 代码。有关更多信息，请参见[[https://developers.google.com/protocol-buffers/docs/reference/objective-c-generated][Objective-C生成的代码参考]]。
    + =--csharp_out= 在 DST_DIR 中生成 C＃代码。有关更多信息，请参见[[https://developers.google.com/protocol-buffers/docs/reference/csharp-generated][C＃生成的代码参考]]。
    + =--php_out= 在 DST_DIR 中生成 PHP 代码。欲了解更多便利，请参见[[https://developers.google.com/protocol-buffers/docs/reference/php-generated][PHP生成的代码参考]]。如果 DST_DIR 以.zip 或.jar 结尾，则编译器会将输出写入给定名称的单个 ZIP 格式存档文件。根据 Java JAR 规范的要求，还将为.jar 输出提供清单文件。注意，如果输出存档已经存在，它将被覆盖；编译器不够智能，无法将文件添加到现有存档中。
  + 必须提供一个或多个 =.proto= 文件作为输入。可以一次指定多个 =.proto= 文件。尽管这些文件是相对于当前目录命名的，但是每个文件都必须位于 =IMPORT_PATH= 之一中，以便编译器可以确定其规范名称。
