# -*- coding:utf-8-*-
#+TITLE: Protocol Buffer 样式指南
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com

本文提供了 =.proto= 文件的样式指南。遵循这些约定，将使 Protocol Buffer 消息定义及其相应的类保持一致并易于阅读。请注意，Protocol Buffer 样式随着时间而发展，因此可能会看到以不同的约定或样式编写的 =.proto= 文件。修改这些文件时，请尊重现有样式。一致性是关键。但是，在创建新的 =.proto= 文件时，最好采用当前的最佳样式。

* 标准文件格式
  + 保持行长为 80 个字符。
  + 缩进 2 个空格。
  + 最好对字符串使用双引号。

* 文档结构
  文件应命名为 =lower_snake_case.proto=

  所有文件应按以下方式排序：
  1. License header (if applicable)
  2. File overview
  3. Syntax
  4. Package
  5. Imports (sorted)
  6. File options
  7. Everything else

* Pcakge
  软件包名称应为小写，并且应与目录层次结构相对应。例如，如果文件位于 =my/package/= 中，则包名称应为 =my.package= 。

* Message and field names
  使用 驼峰命名法（CamelCase）（首字母大写）作为消息名称，例如，SongServerRequest。使用 =underscore_separated_names= 作为字段名（包括 oneof 字段名和扩展），例如 song_name。

  #+BEGIN_SRC protobuf
message SongServerRequest {
  required string song_name = 1;
}
  #+END_SRC

  使用字段名称的这种命名约定，可以提供如下访问器：
  #+BEGIN_SRC protobuf
C++:
  const string& song_name() { ... }
  void set_song_name(const string& x) { ... }

Java:
  public String getSongName() { ... }
  public Builder setSongName(String v) { ... }
  #+END_SRC

  如果字段名称包含数字，则该数字应出现在字母之后而不是下划线之后。例如，使用 =song_name1= 代替 =song_name_1=

* Repeated fields
  对重复的字段使用复数名称。
  #+BEGIN_SRC protobuf
repeated string keys = 1;
...
repeated MyMessage accounts = 17;
  #+END_SRC

* Enums
  使用驼峰命名法（CamelCase）（以大写字母开头）作为枚举类型名称，并使用 CAPITALS_WITH_UNDERSCORES 作为值名称：
  #+BEGIN_SRC protobuf
enum Foo {
  FOO_UNSPECIFIED = 0;
  FOO_FIRST_VALUE = 1;
  FOO_SECOND_VALUE = 2;
}
  #+END_SRC

  + 每个枚举值都应以分号（而不是逗号）结尾。
  + 优先为枚举值添加前缀，而不是将其包含在封闭消息中。
  + 零值枚举应带有后缀 =UNSPECIFIED= 。

* Services
  如果 =.proto= 定义了 RPC 服务，则应该对服务名称和任何 RPC 方法名称都使用驼峰命名法（CamelCase）（以大写字母开头）：
  #+BEGIN_SRC protobuf
service FooService {
  rpc GetSomething(FooRequest) returns (FooResponse);
}
  #+END_SRC

* 避免的事
  + Required fields (only for proto2)
  + Groups (only for proto2)
