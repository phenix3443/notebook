# -*- coding:utf-8-*-
#+TITLE: xpath 之location path
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com

* 前言

  建议首先阅读 [[https://zh.wikipedia.org/wiki/XPath][xpath on wiki]] ，了解 xpath 的基本用法，这是将 xpath 介绍的最清楚的文章了，比 w3c 上文章要好。

  然后可以阅读相关标准：[[https://www.w3.org/TR/1999/REC-xpath-19991116/][XML Path Language (XPath) Version 1.0]]

  本文内容根据标准，结合 wiki 整理。

* location path
  最常见的 XPath 表达式是路径（location path)。路径是从一个 XML 节点（当前的上下文节点（context node））到另一个节点、或一组节点的步骤（location steps）顺序。这些步骤（step）以 =/= 字符分开。

  一般情况下，我们使用简写后的语法。虽然完整的轴描述是一种更加贴近人类语言，利用自然语言的单词和语法来书写的描述方式，但是相比之下也更加罗嗦。

** 简写后的语法
   最简单的 XPath 如下：
   #+BEGIN_EXAMPLE
   /A/B/C
   #+END_EXAMPLE

   此时选择的 C 节点是：C 节点必须是 B 的子节点（B/C），同时 B 节点必须是 A 的子节点（A/B），而 A 是这个 XML 文档的根节点（/A）。这种描述法类似于磁盘中文件的路径（URI），从盘符开始顺着一级一级的目录最终找到文件。

   这里还有一个复杂一些的例子：
   #+BEGIN_EXAMPLE
   A//B/*[1]
   #+END_EXAMPLE

   此时选择的元素是：在 B 节点下的第一个节点（ =B/*[1]= ），不论节点的名称如何（*）；而 B 节点必须出现在 A 节点内，不论和 A 节点之间相隔几层节点（//B）；与此同时 A 节点还必须是当前节点的子节点（A，前边没有/）。

** 啰嗦的语法

   在未缩写语法里，两个上述范例可以写为：
   #+BEGIN_EXAMPLE
   /child::A/child::B/child::C
   child::A/descendant-or-self::B/child::node()[1]
   #+END_EXAMPLE

   在 XPath 的每个步骤里，通过完整的轴描述（例如：child 或 descendant-or-self）进行明确的指定，然后使用::，它的后面跟着节点测试的内容，例如上面范例所示的 A 以及 node()。

** 相对路径与绝对路径
   有两种位置路径：相对位置路径和绝对位置路径。

   相对位置路径由一个或多个由 =/= 分隔的位置步骤（location step）组成。相对位置路径中的步骤（step）从左到右组合在一起。每个步骤依次选择相对于上下文节点的一组节点。例如， =child::div/child::para= 选择上下文节点中 div 元素的 para 子元素。

   绝对位置路径由 =/= 可选地后跟相对位置路径组成。 =/= 本身选择包含上下文节点的文档的根节点。

* location step
  location step 由 3 各部分组成：
  + 一个轴（axis），它指定由步骤选中的节点和上下文节点之间的树关系。
  + 一个节点测试（node tes），它指定由步骤选中的节点的节点类型和扩展名。
  + 零个或多个谓词（Predicates），它使用任意表达式来进一步细化步骤选择的节点集。

  步骤的语法是用双冒号分隔的轴名称和节点测试，后跟方括号中的零个或多个表达式。例如：
  #+BEGIN_EXAMPLE
  child::para[position()=1]
  #+END_EXAMPLE
  child 是轴的名称，para 是节点测试，[position()=1]是谓词。

  由步骤选择的节点集是通过从轴和节点测试生成初始节点集，然后依次过滤每个谓词的节点集而得到的节点集。

** 轴描述语法（axis）
   常见的轴有：

   | 坐标               | 名称               | 说明                                                     | 缩写语法     |
   |--------------------+--------------------+----------------------------------------------------------+--------------|
   | child              | 子节点             | 比自身节点深度大的一层的节点，且被包含在自身之内         | 默认，不需要 |
   | attribute          | 属性               |                                                          | @            |
   | descendant         | 子孙节点           | 比自身节点深度大的节点，且被包含在自身之内               | 不提供       |
   | descendant-or-self | 自身引用及子孙节点 |                                                          | //           |
   | parent             | 父节点             | 比自身节点深度小一层的节点，且包含自身                   | ..           |
   | ancestor           | 祖先节点           | 比自身节点深度小的节点，且包含自身                       | 不提供       |
   | ancestor-or-self   | 自身引用及祖先节点 |                                                          | 不提供       |
   | following          | 下文节点           | 按纵轴视图，在此节点后的所有完整节点，即不包含其祖先节点 | 不提供       |
   | preceding          | 前文节点           | 按纵轴视图，在此节点前的所有完整节点，即不包含其子孙节点 | 不提供       |
   | following-sibling  | 下一个同级节点     |                                                          | 不提供       |
   | preceding-sibling  | 上一个同级节点     |                                                          | 不提供       |
   | self               | 自己               |                                                          | .            |
   | namespace          | 命名空间           |                                                          | 不提供       |

   关于使用 attribute 坐标简写语法的一个范例： =//a/@href=  在文件树里任何地方的元素下选择了一个叫 href 的属性。

   self 坐标通常与节点描述同用，以参考现行选定节点。例如， ~h3[.='See also']~ 在现行上下文选取了叫 h3 的元素，该元素文字内容是 See also。

** 节点测试（node test）
   每个轴都有一个主节点类型。如果一个轴可以包含元素，那么主节点类型就是元素; 否则，它是轴可以包含的节点类型。 从而，
   + 对于属性轴，主节点类型是属性。
   + 对于命名空间轴，主节点类型是名称空间。
   + 对于其他轴，主节点类型是元素。

   于主节点类型的任何节点，节点测试 =*= 为 true。例如， =child::*= 将选择上下文节点的所有元素子节点， =attribute::*= 将选择上下文节点的所有属性。

   对于任何文本节点，节点测试  =text()= 都为 true。 例如， =child::text()= 将选择上下文节点的文本节点类型子节点。 类似地，节点测试 =comment()= 于任何注释节点都为真，并且对于任何处理指令，节点测试  =processing-instruction()= 都为真。 =processing-instruction()= 测试可能有一个 Literal 参数; 在这种情况下，对于任何名称等于 Literal 值的处理指令都是如此。

   对于任何类型的任何节点，节点测试 =node()= 都为 true。

** 谓词（Predicates）

   谓词为一个逻辑真假表达式，任何真假判断表达式都可在节点后方括号里表示，在某一步骤可有多少个描述并没有限制。

   谓词过滤相对于轴的节点集以产生新的节点集。如果对该节点的计算结果为 true，则该节点包含在新节点集中；否则，它不包括在内。

   例如： ~//a[@href='help.php']~ ，这将检查元素 a 有没有 href 属性，并且该它的值是 help.php。

   复杂一些的范例如下：
   #+BEGIN_EXAMPLE
   //a[@href='help.php'][../div/@class='header']/@target
   #+END_EXAMPLE

   或
   #+BEGIN_EXAMPLE
   //a[@href='help.php'][name(..)='div'][../@class='header']/@target
   #+END_EXAMPLE

   此例将会选择符合条件的元素 a 的 target 属性。 要求元素 a：
   + 具有属性 href 且值为 help.php；
   + 并且元素 a 具有父元素 div；
   + 并且父元素（div）其自身具备 class 属性，值为 header。
