# -*- coding:utf-8-*-
#+TITLE: TCP/IP 详解卷一笔记
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com
#+STARTUP: overview
#+OPTIONS: num:nil

* 第一章 概述
** 1.2 分层
   + 链路层：包括设备驱动协议和网络设备，处理传输媒介的物理接口细节。
     + ARP（地址解析协议）和 RARP（逆向地址解析协议），转换 IP 层和其他链路层地址。
   + 网络层：处理分组在网络中的活动。
     + IP（网际协议），
     + ICMP（互联网控制报文协议），是 IP 的附属协议，IP 层用它与其他主机或路由器交换错误报文和其他重要消息。
     + IGMP（互联网分组管理协议），用于 UDP 多播。
   + 传输层：为应用层提供端到端的通信。
     + TCP（传输控制协议）
     + UDP（用户数据报协议）
   + 应用层：处理应用程序细节。
     + Telnet（远程登陆）
     + FTP（文件传输协议）
     + SMTP（简单邮件传输协议）
     + SNMP（简单网络管理协议）

   + 端系统
   + 中间系统
     + 路由器，让异构网络在 *网络层* 互联。
     + 网桥，在 *链路层* 网络互联。

** 1.3 TCP/IP 的分层

** 1.4 互联网的地址
   [[http://images2015.cnblogs.com/blog/603942/201610/603942-20161024110345781-1165410356.png]]

   记忆方法：
   + 起始地址分别是：0，10，110，1110，11110，增量分别是 128，64，32，16
   + A-C 网络号长度分别是：7，14，21
   + D-E 类没有网络号和主机号。
   + D 类剩下的 28 位全部是多播组号。
   + E 类留作后用，地址到 247.255.255.255。

   地址分：单播，多播，和广播。

** 1.5 域名系统

** 1.6 封装
   + TCP 段（tcp segment），UDP 数据报（UDP datagram），16 bit 端口号表示应用程序标识符。
   + IP 数据报（IP datagram），8 bit 协议域（1 是 ICMP，2 是 IGMP，6 是 TCP，17 是 UDP）。
   + 以太网帧（Frame），16 bit 帧类型域。

** 1.7 分用

** 1.8 客户服务器模型

** 1.9 端口号

* 第二章 链路层
** 2.1 引言
   链路层作用：为 IP、ARP、RARP 模块发送和接受数据包。

** 2.2 以太网和 IEEE 802 封装
   以太网（Ethernet II）和 IEEE 802 分别定义了 CSMA/CD（带冲突检测的载波侦听多路接入）技术的帧封装格式。

   以太网帧主要由三部分组成：
   + 数据 Payload 部分 (46-1500 byte)。(为什么是 46-1500[fn:1][fn:2])
   + 以太网协议本身占用 (18-22 byte)，包括：目的 Mac(6 byte)、源 MAC(6 byte)、标签 (可选)(4 byte)、类型或长度 (2 byte)、校验码 (4 byte)。
   + 以太网协议填充占用 (20 byte)，包括：前序 (8 byte)、包间隙 (12 byte)。

   + 使用 48 bit（6 字节）作为源地址和目的地址，也就是硬件地址（MAC 地址）。
   + RFC802.3
     + 协议中的长度字段表示它后续字节长度，但不包括 CRC 校验码。
     + 长度 38-1492 字节。
   + Ethernet II（RFC894）
     + 最常用。
     + 长度 46-1500 字节。

** 2.7 还回端口
   传递给还回端口的数据包不能在任何网络上出现。

   传递给多播或广播的数据包都会复制一份传给还回端口。

** 2.8 最大传输单元 MTU
   链路层最大传输数据称为 MTU，以太网帧 MTU 是 46-1500，如果 IP 层数据超过 MTU 需要进行分片。

*** 为什么要设置 MTU
    点到点的链路层（如 SLIP 和 PPP）的 MTU 并非网络媒体的物理特性，而是一个逻辑限制，目的是为交互提供足够快的响应时间。
    + 太大别人需要等。
    + 太大出错了重发浪费时间。
    + 太大不容易对数据进行校验。

** 2.9 路径 MTU
   两台机主通信路径上的最小 MTU 称为路径 MTU。

* 第三章 IP：网际协议
** 3.1 引言
   发生错误式，IP 层只是简单的丢弃数据包，然后发送 ICMP 消息报给信源端。

** 3.2 IP 首部
   普通 IP 首部是 20 个字节。
   + 版本 version（4 bit）
   + 首部长度 header lenght（4 bit)， *单位是 32 位字长度* ，所以首部最长 15 个字，60 个字节。
   + 服务类型 type of service（TOS）(8 bit)，不同的上层服务对应不同的服务类型：最小时延，最大吞吐量，最高可靠性，最小费用
   + 总长度 total length 是指整个 IP 数据报的总长度（字节）。
     + 主机要求不能接受超过 576 字节的数据报。
     + 大量使用 UDP 的应用限制用户数据是 512 字节。
   + 标识段 identification（16 bit）
     + 唯一标识主机发送的每一份数据报。通常每发送一份它的值就会加一。
   + 标志（3 bit）
   + 片偏移 Fragment offset（13 bit）
   + 生存时间 time to live（TTL）（8 bit）初始值由 RFC 指定，当前值是 64。ping 将该字段设置为最大值 255。
   + 协议字段 Protocol（8 bit）
   + 首部检验和 header checksum（16 bit）
     + ICMP，IGMP，UDP，TCP 在各自的首部中包含同时覆盖首部和数据的校验和。
     + 计算规则
     + 校验出错直接丢弃收到的数据报，不生成出错报文，由上层协议发现丢失的数据包并进行重传。
   + 源 IP
   + 目的 IP
   + 任选项（options）

** 3.3 IP 路由选择
   路由规则

   路由表：route 命令
** 3.4 子网寻址
** 3.5 子网掩码
** 3.6 特殊情况的 IP 地址
** 3.8 iconfig 命令
** 3.9 netstat 命令

* 第四章 ARP：地址解析协议
** 4.2 一个例子
   ARP 本来适用于广播的。

** 4.3 ARP 高速缓存
** 4.4 ARP 分组格式
** 4.5 ARP 举例
** 4.6 ARP 代理
** 4.7 免费 ARP
   是指主机发送 ARP 查找自己的 IP 地址。通常发生在系统引导期间进行接口配置的时候。

   主要有两个方面的作用：
   1. 一个主机通过它来确定另一个主机是否设置了相同的 IP 地址。
   2. 发送免费 ARP 的主机更改硬件地址后，通过该分组通知其他主机更新 ARP 缓存。

** 4.8 arp 命令

* 第五章 RARP：逆地址解析协议
* 第六章 ICMP：internet 控制报文协议
** 6.1 引言
   ICMP 传输差错信息以及其他需要注意的信息。

   ICMP 报文是在 IP 数据报内部传输的。

   报文组成：
   + 类型（8）
   + 代码（8）
   + 检验和（16）
   + 内容

** 6.2 ICMP 报文的类型
   各种类型 ICMP 报文由报文中的类型和代码字段共同决定。主要分为两大类：查询报文和差错报文。差错报文有时需要特殊处理。

   当发送差错报文时，报文是中包含 IP 的首部和产生 ICMP 差错报文的 IP 数据报的前八个字节。这样，接受 ICMP 报文的模块就会把它与某个特性的协议（根据 IP 数据报首部中的协议字段）和用户进程（根据包含在 IP 数据报前 8 个字节中的 TCP 或 UDP 报文首部中的端口号来判断）联系起来。

** 6.3 ICMP 地址掩码请求与应答
** 6.4 ICMP 时间戳请求与应答
** 6.5 ICMP 端口不可达差错

* 第七章 Ping 程序
* 第八章 Tracerrout 程序
** 8.2 Traceroute 程序的操作
   tranceroute 程序利用的是 ICMP 报文和 IP 首部中的 TTL 字段。

   当路由器收到一份 IP 数据报，如果其 TTL 字段是 0 或 1，则路由器不转发该数据报（接收这种数据报的目的主机可以将它交给应用程序，这是因为不需要转发该数据报。但是在通常情况下，系统不应该接受到 TTL 值为 0 的数据报）。相反，路由器将该数据报丢弃，并给信源机发一份 ICMP“超时”消息。tranceroute 程序的关键在于包含这份 ICMP 信息的 IP 报文的信源地址是该路由器的 IP 地址。

** 8.3
* 第九章 IP 选路
** 9.1 引言
   + 动态选路和选路信息协议 RIP（Routing Information Protocol）
   + IP 层路由决策
** 9.2 选路的原理
   IP 层的选路实际上是一种 *选路机制（routing mechanism）* ， 它搜索路由表并决定向哪个网络接口发送分组。这区别于 *选路策略（routing policy）* ，它只是一组决定把那些路由器放入路由表的规则。

   IP 执行选路机制，而路由守护程序则一般提供选路策略。

   路由表中的标志（flag）：
   + U 该路由可以使用。
   + G 区分直接路由和间接路由。间接路由 MAC 指向网关，而直接路由目的 MAC 地址指向主机。
   + H 表明目的地是一个主机地址还是网络地址。
   + D 该路由由重定向报文创建。
   + M 该路由由重定向报文修改。

   每个接口都有对应的子网掩码，因此每个路由表项都有一个隐含的子网掩码。

   当路由器没有默认项，而又没有找到匹配项时，如果 IP 数据报
   + 由本地主机产生，返回应用程序“网络不可达差错”或“网络不可达差错”。
   + 由路由器转发，给信源发送“主机不可达差错”。

** 9.5 ICMP 重定向
   当 IP 数据报应该发送给另外一个路由器时（发现接收和发送数据报的接口是一样的），收到数据报的路由器给信源发送“ICMP 重定向差错报文”。

   重定向一般用来让具有很少选路信息的主机逐渐建立更完善的路由表。

   ICMP 重定向报文创建的时主机路由，而不是网络路由。

   ICMP 重定向报文规则：
   + 只能由路由器生成，不能由主机生成。
   + 重定向报文是为主机而不是路由器使用的。

** 9.6 ICMP 路由发现报文
   初始化路由表的方法：
   + 配置文件中指定默认路由
   + 使用 ICMP 路由器通告和请求报文。

* 第十章 动态选路协议
** 10.2 动态选路

   相邻路由器上的路由守护程序，运行选路协议，交换当前路由器所连接的网络信息，然后更新内核中的路由表，这就是动态选路。也就是说路由表由路由守护程序动态更新，而不是 route 命令。

   自治网络系统内部各路由之间选路协议称之为内部网关协议 IGP（interior Gateway Protocol），常用的协议有：
   + 选路信息协议（RIP）
   + 开放最短路径优先协议 OSPF（Open Shortest Path First）


   自治网络系统之间使用外部网关协议：
   + EGP（Exterier Gateway Protocol）。
   + 边界网关协议 BGP（Border Gateway Protocol）

** 10.3 Unix 选路守护程序
   选路程序：
   + routed，只支持 RIP
   + gated，IGP EGP 支持

** 10.4 RIP 选路信息协议
   RIP 是距离向量协议。
** 10.5 RIP 版本 2

** 10.6 OSPF 开放最短路径优先
   与 RIP 不同：
   + OSPF 是链路状态协议。链路状态协议比距离向量协议收敛更快。
   + 直接使用 IP。
   + 支持子网。
   + 采用多播。

** 10.7 BGP 边界网关
   BGP 使用 TCP，是一个距离向量协议。

** 10.8 CIDR

* 第十一章 UDP：用户数据报协议
** 11.1 引言
   UDP 是一个 *面向数据报* 的传输层协议： 进程的 *每个输出操作都正好产生一个 UDP 数据报，并组装成一个待发送的 IP 数据报* 。

   这与面向 *流字符* 的协议不同， *应用程序产生的全体数据与真正发送的单个 IP 数据报可能没有什么联系* 。

   应用程序必须关系 IP 数据报的长度。因为超过网络 MTU，可能会被发送端或者中建系统分片。

** 11.2 UDP 首部
   + source port number，destination port number（16bit）

     TCP 端口号与 UDP 端口号是独立的，同一端口号可以同时被 TCP 和 UDP 监听。

   + total length(16 bit)

     这个字段是冗余的，

   + checksum(16 bit)

** 11.3 UDP 检验和

   检验和覆盖首部和数据。UDP 的检验和是可选的（但总是在用），但是 TCP 是必须的。

   UDP 数据报 和 TCP 段都包含一个 12 字节长的伪首部，它是为了就是你检验和而设计的。

   伪首部包含 IP 首部的一些字段，其目的是让 UDP 再次检查数据是否已经正确到达目的地。

   与 IP 层一样，检验和出错直接丢弃数据报，不产生任何差错报文。

** 11.4
** 11.5 IP 分片
   IP 数据报分片以后，只有到达目的地才进行重新组装。

   IP 分片，即使丢失一片数据也要重传整个数据报。因为这个原因，要避免分片。

   运输层首部只在第一片数据中。

** 11.6 ICMP 不可达差错
** 11.11 ICMP 源站抑制差错
   当一个系统接收数据的速度比处理速度快时，可能产生这个差错。
* 第十二章 广播和多播

* 第十三章 IGMP：internet 组管理协议
* 第十四章 DNS：域名系统

* 第十五章 TFTP：简单文件传送协议

* 第十六章 BOOTP：引导程序协议

* 第十七章 TCP：传输控制协议
** 17.2 TCP 服务
   TCP 提供了一种面向连接的、可靠的字节流服务。

   + 面向连接：三次握手，四次挥手。
   + 可靠：
     + 数据分段
     + 接受确认
     + 超时重传
     + 检验和
     + 重新排序
     + 流量控制

   + 字节流：

** 17.3 TCP 首部
   + 源端口、目的端口(socketpair)
   + 序列号、确认号
     + 主机要发送数据的第一个字节序号为这个 ISN 加 1，因为 syn 标志小号一个序号，FIN 也消耗一个序号。
     + 全双工服务。
     + TCP 可以表述为一个没有选择确认或否认的滑动窗口协议（滑动窗口协议用于数据传输将在 20.3 节介绍）。我们说 TCP 缺少选择确认是因为 TCP 首部中的确认序号表示发方已成功收到字节，但还不包含确认序号所指的字节。当前还无法对数据流中选定的部分进行确认。例如，如果 1～1024 字节已经成功收到，下一报文段中包含序号从 2049～3072 的字节，收端并不能确认这个新的报文段。它所能做的就是发回一个确认序号为 1025 的 ACK。它也无法对一个报文段进行否认。例如，如果收到包含 1025～2048 字节的报文段，但它的检验和错，TCP 接收端所能做的就是发回一个确认序号为 1025 的 ACK。
   + 首部长度
     + 单位是 32 字长度，
   + 窗口大小
     + 单位字节数
   + 检验和
     + 覆盖 TCP 整个报文段。
   + 紧急指针
   + 选项
     + 最大报文段长度（MSS）,每个连接方通常都在通信的第一个报文段（为建立连接而设置 SYN 标志的那个段）中指明这个选项。它指明本端所能接收的最大长度的报文段避免分段。

* 第十八章 TCP 连接的建立和终止
** 18.2 连接的建立和终止
   + 终止连接需要 4 次握手，这是由于 TCP 的半关闭造成的。发送 FIN 通常是应用层进行关闭的结果。

** 18.4 最大报文长度
   + 当一个连接建立时，连接的双方都要通告各自的 MSS。也就是说 MSS 选项只能出现在 SYN 报文段中。
   + MSS 默认 536 字节。
   + 当 TCP 发送一个 SYC 时，它能将 MSS 值设置为外出接口上的 MTU 长度减去固定的 IP 首部长度和 TCP 首部长度。

** 18.6 TCP 状态变迁图
   + 注意连接终止时，主动关闭的四种状态，和被动关闭的两种状态。
   + 在连接处于 2MSL 等待时，任何迟到的报文段将被丢弃。
   + 一个插口对，在它处于 2MSL 等待时，将不能再被使用。（注意，使用 SO_REUSEADDR 可以重用端口，但是插口对不可用。）
   + 如果处于 2MSL 等待的主机故障重启，那么故障前发出报文会被错误的当做重启后新连接的报文段。为了防止这种情况，RFC793 支出 TCP 在重启后的 MSL 秒内不能建立任何链接。这称为平静时间（quiet time）。

** 18.7 复位报文段
   + 也可能发送一个复位报文段而不是 FIN 来中途释放一个连接。
   + 如果一方已经关闭或异常终止连接而另一方还不知道，这样的 TCP 连接称为半打开的。（比如主机断电产生）
   + 这样的坏处是服务器主机会产生很多半打开的 TCP 连接，可使用 keepalive 避免。
   + 如果是服务器故障导致客户端产生半打开连接，客户端发送消息将会收到复位作为应答。

** 18.8 同时打开
   + 同时打开需要交换 4 个报文段，但仍然只产生一个连接。

* 第十九章 TCP 的交互数据流

* 第二十章 TCP 的成块数据流
** 20.1 引言
   滑动窗口协议：允许发送方在停止并等待确认前可以连续发送多个分组。

** 20.2 正常数据流
   ACK 可以累计，并在时延定时器溢出是发出。

   特殊的 ACK 可以用来更新窗口。

** 20.3 滑动窗口
   窗口合拢，窗口张开，窗口收缩（不要使用）

** 20.4 窗口大小
   通过 socket 接口设置 recv buffer 大小来设置窗口大小。

** 20.5 PUSH 标志
   该标志通知接收方将所有收到的数据全部提交给接收进程，不要因等待额外数据而使已提交数据在缓存中滞留。

** 20.6 慢启动
   如果发送方和接收方中间存在多个路由器和速率较慢的链路，这时 *中间路由将需缓存分组* ，并有可能耗尽存储器空间。

   所以实际网络中，发送方不可以一开始就发送多个报文段，直至达到接收方通告的窗口大小为止。

   慢启动算法通过观察到 *新分组进入网络的速率和另一端返回确认的速率相同* 而进行工作。

   拥塞窗口（congestion window），cwnd 初始化为一个报文段， *每收到一个 ACK，拥塞窗口就增加一个报文段* 。

   慢启动以 *报文段为单位* 进行增加。

   发送方取拥塞窗口与通告窗口中的最小值作为发送上限。

   拥塞窗口是发送方使用的流浪控制，而通告窗口是接收方使用的流量控制。

** 20.7 成块数据的吞吐量
   发送一个分组的时间取决于两个因素：传播时延和发送时延。

** 20.8 紧急方式
   它使一端可以告诉另一端有些具有某种方式的“紧急数据”已经放置在普通的数据流中。

   紧急指针与 TCP 首部中的序号相加，得出紧急数据的最后一个字节的序号。

   没办法指明紧急数据从数据流的何处开始。

   用途：Telnet 和 Rlogin 使用该方式通知服务器用户键入了中断键。

* 第二十一章 TCP 的超时与重传
** 21.1 引言
   超时和重传的策略关键：怎样决定超时间隔和如何确定重传频率。

   对于每个连接，TCP 管理 4 个不同的定时器：
   + 重传定时器，希望得到对方确认。
   + 坚持定时器（persist），使窗口大小信息保持不断流动。
   + 保活定时器（keepalive），检测空闲连接的另一端何时崩溃或重启。
   + 2MSL 定时器，测量一个处于 TIME_WAIT 状态的时间。

** 21.2 超时与重传的简单例子
   连续重传之间的时间间隔 1,3,6,12,24,48,64，指数退避（exponential backoff），最终发送方放弃并发送复位信号。

   首次分组传输与复位信号之间的时间差约为 9 分钟，该时间在当前的 TCP 实现中是不可变的。

** 21.3 往返时间测量
   往返时间（RTT）， 平滑是是为了更好的计算均值。

   RTO = A + 4D

   重传超时时间（RTO），A 是被平滑的 RTT，D 是被平滑的均值偏差。

   重传多义性问题。

   当一个超时和重传发生时，在重传数据的确认最后到达之前，不能更新 RTT 估计器。

** 21.4 往返时间 RTT 例子

** 21.5 拥塞举例

** 21.6 拥塞避免算法
   慢启动是在一个连接上发起数据流的方法。

   拥塞避免算法是一种处理丢失分组的方法。

   二者是两个目的不同、独立的算法。但是二者通常在一起实现。

   拥塞避免算法和慢启动算法需要对每个连接维持两个变量：一个拥塞窗口（cwnd）和一个慢启动门限（ssthresh）。

   算法的工作流程：
   1. 对给定的一个连接，初始化 cwnd 为一个报文段，ssthresh 为 65535 个字节。
   2. TCP 输出不能超过 cwnd 和接收方通告窗口的大小。
   3. 当拥塞发生时，ssthresh 被设置位当前窗口的一半。如果是超时引起了拥塞，则 cwnd 设置为一个报文段（这就是慢启动）。
   4. 当新的数据被对方确认时，就增加 cwnd，但是增加的方法依赖于我们是否正在进行慢启动或拥塞避免。如果 cwnd 小于或等于 ssthresh，则正在进行慢启动，否则正在进行拥塞避免。慢启动一直持续到当拥塞发生时所处位置的一半（此时 sshthresh）才停止，然后转为执行拥塞避免。

   慢启动初始设置 cwnd 为 1 个报文段，此后每收到一个确认就增加 1。（指数增长）

   拥塞避免算法要求每次收到一个确认时将 cwnd 增加 1/cwnd。（加性增长） 这样，在一个往返时间内最多位 cwnd 增加一个报文段（不管这个 RTT 中收到了多少 ACK）。

** 21.7 快速重传和快速恢复算法
   连续收到 3 个或 3 个以上重复 ack，就立刻重传丢失的数据报文段，而无需等待超市定时器溢出。这就是 *快速重传算法* 。

   接下来执行就 *不是慢启动而是拥塞避免算法* ，这就是快速恢复算法。（注：“恢复”是指从拥塞状况中恢复）

** 21.8 拥塞举例

** 21.9 按每条路由进行度量
   路由表信息中保留了很多指标。

** 21.10 ICMP 的差错
   tcp 常见 ICMP 差错就是：源站抑制、主机不可达和网络不可达。

** 21.11 重组分组
   当 TCP 超时并重传时，他不一定要重传同样的报文段。相反，TCP 允许进行重新分组而发送一个较大的报文段。

* 第二十二章 TCP 的坚持定时器
** 22.1 引言
  解决：接收方窗口从 0 恢复后，通知窗口变化 ack 可能丢失的问题。

  坚持定时器用来周期性的向接收方查询，以便发现窗口是否增大。

** 22.2 一个例子
  窗口探查包含一个字节的数据。TCP 总是允许在关闭连接钱发送一个字节的数据。

** 22.3 糊涂窗口综合症

   待了解

* 第二十三章 TCP 的保活定时器
** 23.1 引言

   保活功能主要是为服务器应用程序提供的。服务器应用程序希望知道客户主机是否崩溃，从而可以代表客户使用资源。

   保活功能就是试图在服务端检测到这种半开放连接。

** 23.2 描述

   如果一个给定的连接在两个小时内没有任何动作，则服务器就向客户发送一个探查报文段。客户端必须处于以下 4 中状态之一：
   + 客户主机依然正常运行，并从服务器可达。此种情况将正常响应探查。
   + 客户主机已经崩溃并重新启动。此种情况不能正常响应探查，此后主机将每隔 75 秒发送一个探查报文，连续发 10 次，如果服务器没有收到一个响应，认为客户端已经关闭并终止连接。
   + 客户主机已经崩溃并已经重新启动。响应复位报文。
   + 客户主机正常响应，但是从服务器不可达。处理同 2.

** 23.3 保活举例
* 第二十四章 TCP 的未来和性能
* 第二十五章 SNMP：简单网络管理协议
* 第二十六章 Telnet 和 Rlogin：远程登陆

* 第二十七章 FTP：文件传送协议

* 第二十八章 SMTP：简单邮件传送键盘

* 第二十九章 网络文件系统

* 第三十章 其他的 TCP/IP 应用程序

* Footnotes

[fn:1] https://www.mnstory.net/2017/07/05/network-ethernet-mtu-mss/

[fn:2] https://community.cisco.com/t5/other-network-architecture/why-the-mtu-size-is-1500/td-p/105418
