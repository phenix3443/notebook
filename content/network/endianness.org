# -*- coding:utf-8-*-
#+TITLE: 字节序
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com

* 概述
  在几乎所有的机器上，多字节对象都是被存储为连续的字节序列。大小端问题主要涉及的是非单字节非字符串外的其余数据的表示和传递，如 short 型、int 型等。

* 大端（高尾端）
  数据的低位保存在内存的高地址中，而数据的高位存储时放在低地址。

  这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放， *存储顺序与我们所看到的数据顺序一致* 。

  优点：符号位在所表示的数据的内容的第一个字节中，便于快速判断数据的正负和大小。

* 小端（低尾端）

  数据的低位或低字节，存储时放在低地址，读取时放在流的末尾，而数据的高位或高字节保存在内存的高地址中。

  优点：
  + 低地址放低字节，所以在强制转换时不需要调整字节的内容。比如把 int 的 4 字节强制转换成 short 的 2 字节时，就直接把 int 数据存储的前两个字节给 short 就行，因为其前两个字节刚好就是最低的两个字节，符合转换逻辑。
  + CPU 做数值运算时从内存中依次从低到高取数据进行运算直到最后刷新最高位的符号位，这样运算方式会更高效。
