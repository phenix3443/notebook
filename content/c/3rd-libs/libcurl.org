# -*- coding:utf-8-*-
#+TITLE: libcurl
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com

* 概述
  [[https://curl.haxx.se/libcurl/][libcurl]] 是一个免费且易于使用的客户端 URL 传输库，支持 DICT，FILE，FTP，FTPS，Gopher，HTTP，HTTPS，IMAP，IMAPS，LDAP，LDAPS，POP3，POP3S，RTMP，RTSP，SCP， SFTP，SMTP ，SMTPS，Telnet 和 TFTP。 libcurl 支持 SSL 证书，HTTP POST，HTTP PUT，FTP 上传，基于 HTTP 表单的上传，代理，cookie，用户 密码验证（基本，摘要，NTLM，协商，Kerberos），文件传输恢复，http 代理隧道等等！

  libcurl 具有高度可移植性，可在多种平台上构建和工作，包括 Solaris，NetBSD，FreeBSD，OpenBSD，Darwin，HPUX，IRIX，AIX，Tru64，Linux，UnixWare，HURD，Windows，Amiga，OS / 2， BeOs，Mac OS X，Ultrix，QNX，OpenVMS，RISC OS，Novell NetWare，DOS 等......

  libcurl 是免费的，线程安全的，IPv6 兼容的，功能丰富的，支持良好的，快速的，完整的文档，并且已经被许多已知的，大型和成功的公司使用。

  libcurl 首先引入了所谓的 easy 接口。 easy 接口中的所有操作都以'curl_easy'为前缀。 easy 接口允许您使用同步和阻塞函数调用进行单次传输。

  libcurl 还提供了另一个接口，允许在单个线程中进行多个同时传输，即所谓的 multi 接口。

  easy 接口是一个同步，高效，快速使用的...是，简单的文件传输接口。已经使用这种方法构建了许多应用程序。

  multi 接口是该系列中的异步，它还使用单个线程提供多个传输。

* 使用
  示例代码放在 https://curl.haxx.se/libcurl/c/example.html

  HTTP get 请求参见[[https://github.com/phenix3443/test/blob/master/c/libcurl/get_req.c][get_req.c]]

  HTTP post 请求参见 [[https://github.com/phenix3443/test/blob/master/c/libcurl/post_req.c][post_req.c]]

** curl_global_init

** curl_global_cleanup

* easy interface
  当使用 libcurl 的“easy”接口时，可以初始化会话并获得一个句柄（通常称为“简单句柄”），可以将其用作使用的 easy 接口函数的输入。使用 curl_easy_init 获取句柄。

  继续在即将进行的传输中设置所需的所有选项，其中最重要的是 URL 本身（如果没有指定的 URL，无法传输任何内容）。可能还想设置一些回调，这些回调将在数据可用时从库中调用等等。所有这些都使用了 curl_easy_setopt。

  CURLOPT_URL 是必须设置的唯一选项，否则无法进行传输。另一个常用的选项是 CURLOPT_VERBOSE，它可以帮助了解 libcurl 正在做什么，在调试时非常有用。 curl_easy_setopt 手册页包含 200 多个可用选项的完整索引。

  如果在任何时候想要删除所有先前设置的单个简易句柄选项，可以调用 curl_easy_reset，还可以使用 curl_easy_duphandle 复制一个简单句柄（包含所有设置选项）。

  当时设置完成后，告诉 libcurl 使用 curl_easy_perform 执行传输。然后它将完成整个操作，并且在完成之前不会返回（成功与否）。

  传输完成后，可以设置新选项并进行另一次传输，或者如果已完成传输，请通过调用 curl_easy_cleanup 来清理会话。如果想要持久连接，则不要立即清理，而是使用相同的简单句柄继续运行并执行其他传输。

** curl_easy_init

** curl_easy_setopt

** curl_easy_perform

** curl_easy_getinfo()
   使用此功能从 curl 会话请求内部信息。第三个参数必须是指向 long 的指针，指向 char *的指针，指向 struct curl_slist *的指针或指向 double 的指针（正如本文档进一步描述的那样）。指向的数据将相应填充，仅当函数返回 CURLE_OK 时才能使用。如果要获取传输相关数据，请在执行传输后使用此功能。

   除非下面明确提到，否则不应释放此函数返回的内存。

* multi interface
  multi 接口提供了 easy 接口不具备的多种功能。主要是：
  1. 启用“pull”接口。使用 libcurl 的应用程序决定在何时何地要求 libcurl 获取/发送数据。
  2. 在同一个线程中同时启用多个传输，而不会使应用程序变得复杂。
  3. 使应用程序同时等待其自己的文件描述符和 curl 的文件描述符上的操作。
  4. 启用基于事件的处理和扩展传输，最多可达数千个并行连接。

* share interface
  share 接口用于 curl“句柄”之间的数据共享。

  可以在多个 easy 句柄之间共享数据。更新并使用相同的 cookie 数据库，DNS 缓存，TLS 会话缓存和/或连接缓存！这样，每次传输都将利用其他传输所做的数据更新。

* options

** CURLOPT_WRITEFUNCTION

   将指针传递给回调函数，该函数应与上面显示的原型相匹配。

   一旦收到需要保存的数据，libcurl 就会调用此回调函数。对于大多数传输，此回调被多次调用，每次调用都会传递另一块数据。 ptr 指向传递的数据，该数据的大小为 nmemb; size 总是 1。

   回调函数将在所有调用中传递尽可能多的数据，但您不能做任何假设。它可能是一个字节，可能是数千个。传递给写回调的最大正文数据量在 curl.h 头文件中定义：CURL_MAX_WRITE_SIZE（通常默认为 16K）。如果启用了 CURLOPT_HEADER，这使得头数据传递给写回调，则可以传递最多 CURL_MAX_HTTP_HEADER 字节的头数据给回调函数。这通常意味着 100K。

   如果传输的文件为空，则可以使用零字节数据调用此函数。

   传递给此函数的数据不是 0 结尾的！

   使用 CURLOPT_WRITEDATA 选项设置 userdata 参数。

   回调应该返回实际处理的字节数。如果该数字与传递给回调函数的数字不同，它将向库发出错误信号。这将导致传输中止，并且使用的 libcurl 函数将返回 CURLE_WRITE_ERROR。如果您的回调函数返回 CURL_WRITEFUNC_PAUSE，则会导致此传输暂停。有关详细信息，请参阅 curl_easy_pause。

   将此选项设置为 NULL 以获取内部默认函数而不是回调。内部默认函数将数据写入 CURLOPT_WRITEDATA 给出的 FILE *。

** CURLOPT_WRITEDATA
   传递给写回调的数据指针。如果使用 CURLOPT_WRITEFUNCTION 选项，则这是您将在该回调的第 4 个参数中获得的指针。如果不使用写回调，则必须将指针设为'FILE *'（强制转换为'void *'），因为 libcurl 在写入数据时会将其传递给 fwrite（3）。

   内部 CURLOPT_WRITEFUNCTION 将数据写入使用此选项给出的 =FILE *= ，如果未设置此选项，则写入 stdout。

   如果您使用 win32 DLL 版本的 libcurl ，如果设置此选项，则必须使用 CURLOPT_WRITEFUNCTION，否则您将遇到崩溃。

** CURLOPT_READFUNCTION
   #+BEGIN_SRC c
size_t read_callback(char *buffer, size_t size, size_t nitems, void *userdata);
CURLcode curl_easy_setopt(CURL *handle, CURLOPT_READFUNCTION, read_callback);
   #+END_SRC

   将指针传递给回调函数，如上面原型所示。

   一旦需要读取数据以便将其发送给对方，libcurl 就会调用此回调函数 - 比如要求它上传或将数据 post 到服务器一样。buffer 指针指向的数据区域应填充最多 size 乘以 nitems 字节数。

   使用 CURLOPT_READDATA 选项设置 userdata 参数。

   函数必须返回它存储在指针 buffer 指向的数据区域中的实际字节数。返回 0 将发送文件结束信号并使其停止当前传输。

   如果通过返回 0“pre-maturely”停止当前传输（即在服务器预期之前，就像你说你将上传 N 个字节而上传少于 N 个字节），可能会遇到服务器“挂起”以等待其他没收到的数据。

   读回调可能会返回 CURL_READFUNC_ABORT 以立即停止当前操作，从而导致传输 CURLE_ABORTED_BY_CALLBACK 错误代码。

   回调可以返回 CURL_READFUNC_PAUSE 以使从此连接读取暂停。有关详细信息，请参阅 curl_easy_pause。

   bugs：在进行 TFTP 上传时，您必须返回回调所需的确切数据量，否则它将被服务器端视为最终数据包，并且传输将在那里结束。

   如果将此回调指针设置为 NULL，或者根本不设置它，则将使用默认的内部读取函数。它在使用 CURLOPT_READDATA 设置的 FILE * userdata 上执行 fread（）。

** CURLOPT_READDATA
   数据 pointer 传递给文件读取函数。如果使用 CURLOPT_READFUNCTION 选项，则这是在回调的第 4 个参数中作为输入获得的指针。

   如果您没有指定读回调但是依赖于默认的内部读取函数，则此数据必须是有效的可读 FILE *（强制转换为'void *'）。

   如果您使用 win32 DLL 版本的 libcurl，如果设置此选项，则必须使用 CURLOPT_READFUNCTION，否则您将遇到崩溃。

** CURLOPT_HTTPHEADER

** CURLOPT_POST

** CURLOPT_POSTFIELDS
   传递 char *作为参数，指向要在 HTTP POST 操作中发送的完整数据。您必须确保数据的格式与服务器接收数据的方式相同。 libcurl 不会以任何方式转换或编码它。例如，Web 服务器可以假设该数据是 url 编码的。

   指向的数据不会被库复制：因此，它必须由调用应用程序保留，直到关联的传输完成。通过设置 CURLOPT_COPYPOSTFIELDS 选项，可以更改此行为（因此 libcurl 会复制数据）。

   此 POST 是一种普通的 application / x-www-form-urlencoded 类（当使用此选项时，libcurl 将设置为 Content-Type 默认），HTML 表单通常使用它。使用 CURLOPT_HTTPHEADER 更改 Content-Type。

   如有必要，您可以使用 curl_easy_escape 对数据进行网址编码。它返回一个指向编码字符串的指针，该字符串可以作为 postdata 传递。

   使用 CURLOPT_POSTFIELDS 意味着将 CURLOPT_POST 设置为 1。

   如果 CURLOPT_POSTFIELDS 显式设置为 NULL，则 libcurl 将从 read 回调中获取 POST 数据。设置 CURLOPT_POSTFIELDS 空字符串发送零字节 POST，或将 CURLOPT_POST 设置为 1 并将 CURLOPT_POSTFIELDSIZE 设置为 0。

   使用带有 HTTP 1.1 的 POST 意味着使用“Expect：100-continue”标头，如果已知 POST 大于 1024 字节或预期大小未知，则 libcurl 将自动添加该标头。您可以像往常一样使用 CURLOPT_HTTPHEADER 禁用此标头。

   要制作 multipart / formdata 帖子（又名 RFC 2388-posts），请查看与 curl_formadd 结合使用的 CURLOPT_HTTPPOST 选项。

** CURLOPT_POSTFIELDSIZE
   如果要将数据发布到服务器，但不希望 lbcurl 使用 strlen（）来测量数据大小，必须使用此选项。发送二进制数据需要使用此选项，否则可能会失败。如果此大小设置为-1，则库将使用 strlen（）来获取大小。

   如果发布的内容超过 2GB，请使用 CURLOPT_POSTFIELDSIZE_LARGE。
