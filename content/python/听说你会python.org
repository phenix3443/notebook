# -*- coding:utf-8 -*-
#+title:听说你会 Python
#+author:刘尚亮
#+email:phenix3443@gmail.com


* 序列
  + The slice of s from i to j is defined as the sequence of items with index k such that i <= k < j

  + Values of n less than 0 are treated as 0 (which yields an empty sequence of the same type as s). Note that items in the sequence s are not copied; they are referenced multiple times. This often haunts new Python programmers; consider:
     #+BEGIN_SRC python
>>> lists = [[]] * 3
>>> lists
[[], [], []]
>>> lists[0].append(3)
>>> lists
[[3], [3], [3]
     #+END_SRC
  + Concatenating immutable sequences always results in a new object. This means that building up a sequence by repeated concatenation will have a quadratic runtime cost in the total sequence length. To get a linear runtime cost, you must switch to one of the alternatives below:
    + if concatenating str objects, you can build a list and use str.join() at the end or else write to an io.StringIO instance and retrieve its value when complete
    + if concatenating bytes objects, you can similarly use bytes.join() or io.BytesIO, or you can do in-place concatenation with a bytearray object. bytearray objects are mutable and have an efficient overallocation mechanism
    + if concatenating tuple objects, extend a list instead
    + for other types, investigate the relevant class documentation
